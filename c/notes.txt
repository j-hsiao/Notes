contents
:1:code constructs
  :1.1:preprocessor
  :1.2:functions
  :1.3:variables
    :1.3.1:types
    :1.3.2:declaration
  :1.4:statements/expressions
  :1.5:comments
  :1.6:keywords
  :1.7:operators
:2:compilation
  :2.1:compiling
  :2.2:linking
:3:memory
:4:headers



__________________
:1:code constructs
  :1.1:preprocessor
    #include
      #include <header_in_path>
      #include "local_header"
    #ifdef SOME_SYMBOL
    #define SOME_SYMBOL VALUE
    #endif

  :1.2:functions
    retType name(argtype argname)


  :1.3:variables
    leading characters:
      a-zA-Z_
    rest:
      a-zA-Z_0-9

    const: cannot change
    pointer: type*

    type and const can be swapped
    what matters is relative position to *
    o = changeable, x = not
    ie:                     loc   val
      int* v                o     o
      const int* v          o     x
      int const * v         o     x
      int* const v          x     o
      const int* const v    x     x


    :1.3.1:types
      integer
        types:
          char      1 byte
          int       2/4 bytes
          short     2 bytes
          long      4 bytes
        modifiers:
          signed (default)
          unsigned
      floats
        types:
          float       4 bytes
          double      8 bytes
          long double 10 bytes
      void
        no return value
        no parameters
        pointers to memory location
          (no info about type/size)
    :1.3.2:declaration
      not initialized:
        type v1, v2, v3...;
      initialized:
        type vname = val, vname=val...;


  :1.4:statements/expressions
  :1.5:comments
    // single-line comment
    /*
    multi-line
    comment
    */
  :1.6:keywords
    auto  :
      default, same as no const, static, extern, etc
    const : see variables
    extern :
      variable declaration
      variable will be defined elsewhere
    register:
      value should be stored in a register
      typically max size of 1 word
      has no memory location(not in ram)
      (only a suggestion)
    static:
      allocate once

  :1.7:operators
    arithmetic
    + - * / %
    ++/--
      var++: return var then ++
      ++var: ++var then return var

    comparison
    == != > < >= <=

    logic
    && || !

    bit
    & | ^ ~ << >>

    others:
    & address
    sizeof()
    * dereference
    bool ? x : y
      if bool, then x else y






______________________________
:2:compilation
  compiler, gcc
  :2.1:compiling
  :2.2:linking


______________________________
:3:memory
  sizeof(type)
    return size of type in bytes

______________________________
:4:headers
  float.h
    FLT_MIN
    FLT_MAX
    FLT_DIG
  stdio.h
