https://www.w3schools.com/html/html5_geolocation.asp
contents:
1::intro
  1a::general
  1b::basic tags
  1c::attributs
2::other tags
  2a::map
  2b::picture
  2c::table
  2d::list
3::layout
  3a::block
  3b::inline
  3c::iframe
4::other
  4a::<script>
  4b::<head>
  4c::layout
  4d::entities
5::forms
  5a::basics
  5b::input
  5c::other tags
6::html5
  6a::html support
  6b::new elements
  6c::graphics
    6c1::canvas
    6c2::svg
    6c3::google maps
7::media
  7a::video
  7b::audio
  7c::plug-ins
  7d::youtube
8::apis
  8a::geolocation
  8b::drag'n'drop
  8c::web storage
  8d::web workers
  8e::SSE

------------------------------
1::intro
  ------------------------------
  1a::general
    tags:
      <tagname>content</tagname>
    <!DOCTYPE>
      helps to display correctly
      <!DOCTYPE html>
    single and double quotes are interchangeable
  ------------------------------
  1b::basic tags
    <html>          contains html code
    <body>          visible stuff
    <head>          metadata
    <h1>-<h6>       header (1 = biggest)
    <p>             paragraph
    <a>             links
    <img>           image
    <br/>           line break
    <hr>            visual line break
    <pre>           fixed-width font, preserves text as is
    <b>             bold
    <strong>        important
    <i>             italics
    <em>            emphasized
    <mark>          marked (highlighted)
    <small>         small
    <del>           deleted (dashed)
    <ins>           inserted text (underlined)
    <sub>           subscript
    <sup>           superscript
    <q>             short quotations
    <blockquote>    long quotes
    <abbr>          abbreviations
    <address>       contact info
    <cite>          cite a title
    <bdo>           can reverse text direction
    <!-- stuff -->  comments


  ------------------------------
  1c::attributes
    href:           uri for link ("http://www.google.com")
                    bookmarks:add a # followed by ID
                    
    src:            path to image ("./image.jpg")
      NOTE:
        href: a "relationship"
        src : insert
        ie: <img src=path>, the image is "inserted" into the <img> tag spot
            <a href=path>, the files at path are not inserted
            NOTE:
              ex: <script src=path>: script stuff is "inserted" into the src (so location of <script> matters)
              <link rel="stylesheet", href=path> : establish the relationship...
    alt:            textual description if image is gone
    style:          inline CSS (see css notes)
    lang:           language attribute for <html> tag ex: "en-US"
    title:          tool tip
    charset:        "UTF-8" for <meta> tag in <head>
    cite:           source for <q> or <blockquote>
    dir:            direction for text ("rtl", "ltr")
    id:             identity string to identify element
    class:          a name for a class, each element
                    can have multiple classes (space delimited)
    target:         _blank    new window or tab
                    _self     in same window/tab
                    _parent   in parent frame
                    _top      in top frame
                    framename named frame (see iframe)
    usemap:         for <img> tag, map different areas on image
                    to different links


------------------------------
2::other tags
  ------------------------------
  2a::map
    tag:
      <map>           image map (clickable areas of image)
        <area>        area of area map
    attr
      shape:          shape for area (see <map>, <area>)
      coords:         params for shape
      name:           a name for map (used by <img>'s usemap attr)
  ------------------------------
  2b::picture
    tag:
      <picture>       general picture
        <source>        choice for image with conditions (see media attr, srcset attr)
        <img>           else case (should always have this)
    attr
      media:          viewport ex: "(min-width: 650px)"
      srcset:         image path (see <source>)
  ------------------------------
  2c::table
    tag:
      <table>         a table
        <caption>     title for table
        <tr>          a row
          <th>        header
          <td>        data
    attr:
      colspan             column span for td or th
      rowspan             colspan but for rows
  ------------------------------
  2d::list
    tags
      <ul>                unordered list
      <ol>                ordered list
      <dl>                description list
        <dt>              item name
        <dd>              item description
        <li>              list item
    attr
      type              (<ol>), A, a, I, i, 1
  ------------------------------
  2e::code
    for programming code
  ------------------------------
  2f::kbd
    for keyboard input sequences
  ------------------------------
  2g::samp
    for sample output
  ------------------------------
  2h::var
    for variable names

------------------------------
3::layout
  determined by the display value
  ------------------------------
  3a::block
    starts on new line, takes up 100% of width
    ex: <div>
  ------------------------------
  3b::inline
    starts wherever last thing ends, takes up only
    corresponding size
    ex: <span>
  ------------------------------
  3c::iframe
    tag:
      <iframe src="URI"</iframe>
    NOTE:
      iframe appears unaffected by style height/width
      must use attr height/width
    attr:
      name              identify the frame
                        used by <a> tag's target attr
------------------------------
4::other
  ------------------------------
  4a::<script>
    tag:
      <script src="path_to_external_js"></script>
      <noscript>stuff</noscript>
    NOTE:
      noscript for ppl who disabled javascript
      or something
      
  ------------------------------
  4b::<head>
    metadata
    tags:
      <title>
      <style>
      <meta>
      <link>
      <script>
      <base>
    specifics
      <meta>
        attr
          charset         "UTF-8"
          name            "name of metadata"
          content         "the actual metadata"
        ex:
          <meta name="keywords" content="kittens, cats, catVideos">
          <meta http-equiv="refresh" content="30">
        NOTE:
          "should add this to all http"
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base>
      base url
      ex:
        <base href="base url" target="_blank">
        (src values are prepended with baseurl)
  ------------------------------
  4c::layout
    tags
      <header>          header
      <nav>             navigation links
      <section>         section of doc
      <article>         independent self-contained article
      <aside>           like sidebar, image, etc?
      <footer>          footer for doc/section
      <details>         additional details
      <summary>         heading for <details>
  ------------------------------
  4d::entities
    use entities like escaping chacters
    ex: < or > indicate tags
        to display < or >
        use &entity_name or &#number
    common
      &nbsp     &160      non-breaking space (words stick together)
      &lt       &#60      <
      &gt       &#62      >
      &amp      &#38      &
      &quot     &#34      "
      &apos     &#39      '
                &#8209    non-breaking hyphen (like above except hyphen)
      
------------------------------
5::forms
  ------------------------------
  5a::basics
    tag
      <form></form>
    attr
      action            form handler page
      target            _self (current window)
                        _blank (new window)
                        _parent
                        _top
                        _iframe name
      method            GET, POST
      accept-charset
      autocomplete
      enctype
      
  ------------------------------
  5b::input
    tag
      <input>
    attr:
      type              radio, text, submit, range, number, password, reset
                        checkbox, color, date, datetime-local, email
                        month, search, tel, time, url, week
      name              a "key" for the input
      value             a (default) value
      max, max          min value
      disabled          not used
      maxlength         .
      pattern           regexp
      readonly          .
      required          .
      size              width of input field (chars)
      step              .
      autocomplete      .
      autofocus         .
      form              specify parent form (space delimited, use the form id)
      formaction
      formenctype
      formmethod
      formnovalidate
      formtarget
          NOTE: attrs beginning with "form" are used by input elements
                overriding the <form> version of the attrs

      height, width     
      list
      multiple
      placeholder
      
  ------------------------------
  5c::other tags
    <fieldset>
      groups related data
    <legend>
      caption for fieldset (ie, personal information, hobbies, etc)
    <select>
      drop-down list
      attr
        size            number of rows for un-focused dropdown
        multiple        (no arg) allow multiple selections
      <optgroup>        related dropdown values>
      <option>
        attr
          selected      (no arg)make this the default
    <textarea>
      attr
        rows
        columns
    <button>
      attr
        type            "button"
        onclick         js function
    <datalist>
      drop-down list of predefined options
      should be inside <input list="id of datalist">
      <option>
        value           value of predefined option
    <output>
      result of a calculation
------------------------------
6::html5
  ------------------------------
  6a::html support
    header, section, footer, aside, nav, main, article, figure {
        display: block;
    }
  ------------------------------
  6b::new elements
    article             .
    aside               .
    bdi                 isolate text with dif direction
    details             details user can view or hide
    dialog              dialog box/window
    figcaption          caption for <figure>
    figure              self-contained content
    footer              .
    header              .
    main                .
    mark                highlighted
    menuitem            command/menu item frm popup menu
    meter               scalar measurement (gauge)
    nav                 nav links
    progress            progress bar
    rp                  ruby annotation replacement
    rt                  explanation/pronunciation for weird chars
    ruby                ruby annotation equivalent of above
    section             .
    summary             .
    time                .
    wbr                 possible line break??
    datalist            .
    output              .
    canvas              graphics
    svg                 graphics
    audio               sound
    embed               
    source              
    track               
    video               

    ------------------------------
    input types         attrs
    color               autocomplete
    date                autofocus
    datetime            form
    datetime-local      formaction
    email               formenctype
    month               frommethod
    number              formnovalidate
    range               formtarget
    search              height/width
    tel                 list
    time                min/max
    url                 multiple
    week                pattern
                        placeholder
                        required
                        step
  ------------------------------
  6c::graphics
    ------------------------------
    6c1::canvas
      draw with JS
        guideline:
          get canvas
          get context
          write params
          context.stroke()
        NOTE:
          coordinates: all (x, y)
          axes: left-right = 0-width
                top-bottom = 0-height
      ex:
        var canvas = document.getElementById("CanvasID");
        var context = canvas.getContext("2d");
        //LINE
        context.moveTo(0,0);
        context.lineTo(200,100); //(x,y)
        context.stroke();
        //CIRCLE
        context.beginPath();
        context.arc(95,50,40,0,2*Math.PI); //cx, cy, rad, startRadian, stopRadian, clockwise, far right = 0
        context.stroke()
        //TEXT
        context.font = "30px Arial";
        context.fillText("stuffToFill", left, bottom);
        //STROKE TEXT
        context.strokeText("stuffToFill", left, bottom);
        //LINEAR GRADIENT
        var grad = context.createLinearGradient(0,0,200,0);//xy for each color
        grad.addColorStop(0, "red");
        grad.addColorStop(1, "white");
        context.fillStyle = grad;
        context.fillRect(10,10,150,80); //left, top, width, height
        //CIRCULAR GRADIENT
        var grad = context.createRadialGradient(75, 50, 5, 90, 60, 100);//x,y,rad for each color
        grad.addColorStop(0, "red");
        grad.addColorStop(1, "white");
        context.fillStyle = grad;
        context.fillRect(10,10,150,80); //left, top, width, height
        //IMAGE FILE
        var img = document.getElementByID("scream");
        context.drawImage(img, 10, 10);
    ------------------------------
    6c2::svg
      <svg>
        code goes here
      </svg>

      ------------------------------
      Circle
        <circle cx="x" cy="y" r="r" stroke="color" stroke-width="width" fill="color"/>
      ------------------------------
      Rect
        <rect width="w" height="h" style="fill:rgb(0,0,255);stroke-width:10;stroke:rgb(0,0,0)"/>
      ------------------------------
      RectWidth
        <rect width="w" height="h" rx="rx" ry="ry" style="fill:rgb(0,0,255);stroke-width:10;stroke:rgb(0,0,0)"/>
      ------------------------------
      Polygon
        <polygon points="x,y x,y x,y x,y x,y"
        style="fill:color;stroke:color;stroke-width:width;fill-rule:rule;"/>
    ------------------------------
    6c3::google maps
      create a div
      use JS to add map:
        function myMap() {
          var mapOptions = {
              center: new google.maps.LatLng(lat, long),
              zoom: zoomval,
              mapTypeId: google.maps.MapTypeId.HYBRID //ROADMAP, SATELLITE, HYBRID, TERRAIN
          }
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);

      get javascript to get map
        <script src="https://maps.googleapis.com/maps/api/js?callback=myMap"></script>
------------------------------
7::media
  ------------------------------
  7a::video
    tag:
      <video>           video tag
      <source>          source (use multiple sources, uses the first one that works)
    attr:
      height/width      .
      src               path to video file
      type              "video/type" (mp4, webm, ogg)
      controls          add controls
      autoplay
    dom(js):
      var vid = getElementById("video")
      vid.paused        T/F
      vid.play()        play
      vid.pause()       pause
      vid.width         can set to change size
  ------------------------------
  7b::audio
    tags
      audio             audio...
      source            see video source
    attr
      src               path to file
      type              "audio/type" (mpeg, ogg, etc)
      controls
  ------------------------------
  7c::plug-ins
    programs to extend browser functions
    tags:
      object
      embed
    attr
      object:
        data    path2file
      embed
        src     path2fielem
      shared
        height  .
        width   .
        type    "application/pdf" etc
    difference:
      object: has closing tag (can put stuff inside)
      embed : no closing tags
  ------------------------------
  7d::youtube
    add vid to youtube
    create iframe
    iframe src=>url
    width, height

    ex:
      <iframe width="420" height="315" src="https://ww.youtube.com/embed/idwhasdf">
      </iframe>
    add querystring to url:
    autoplay:       0: no, 1: yes
    playlist:       ,-delimited list of ids
    loop:           0: no, 1: yes
    controls:       0:no, 1:yes

------------------------------
8::apis
  ------------------------------
  8a::geolocation
    use js
    navigator.geolocation
        defined = supported, else not
        ie: if (navigator.geolocation) { console.log("supported");}

    navigator.geolocation.getCurrentPosition(callable1, callable2)
      calls callable1(position) if no errors
        position
          coords
            latitude
            longitude
            accuracy
            altitude
            altitudeAccuracy
            heading
            speed
          timestamp
        ex: position.coords.latitude
      calls callable2(error) if errors
        error.code = error code
        example values:
          error.PERMISSION_DENIED
          error.POSITION_UNAVAILABLE
          error.TIMEOUT
          error.UNKNOWN_ERROR
    other navigator.geolocation members:
      watchPosition()  : continually update position
      clearWatch()     : stop above func
  ------------------------------
  8b::drag'n'drop
    steps:
      1. add to draggable element:
          draggable="true"
          ondragstart="jsFunc"
              jsFunc(ev)
                  use ev.dataTransfer.setData("key", value);
      2. on possible destination elements:
          ondragover="jsFunc"
              jsFunc(ev)
                  ev.preventDefault()
              NOTE:
                this ev is different from the other evs:
                  data set in the ondragstart func will not be seen
                  in this ev
          ondrop="jsFunc"
              jsFunc(ev)
                  ev.preventDefault()
                  var value = ev.dataTransfer.getData("key");
                  ev.target.appendChild(document.getElementById(value));
  ------------------------------
  8c::web storage
    local data storage (ex, cookies are sent to server every time)
    storage is by protocol + domain

    storage objects:
      window.localStorage               no expire
      window.sessionStorage             1 session (til tab closed)
    ex:
      1. check storage
          if (typeof(Storage) !== "undefined") {console.log("supported")}
              NOTE: use typeof(thing) !== "undefined" to avoid any errors
                     (thing is undefined error for example)
              (or use window.localStorage or something...)
      2. store stuff
          window.localStorage.setItem("key", "value");
      3. get stuff
          window.localStorage.getItem("key");
      4. remove stuff
          window.localStorage.removeItem("key");
      NOTE:
          values seem to be automatically converted into string so
          when accessing, you must convert it back to what it should be

  ------------------------------
  8d::web workers
    multiprocessing
      if (typeof(Worker) !== "undefined") {console.log("supported");}
    steps:
        1. write a script (separate file??)
            use postMessage(i) to put data on queue
        2. create worker if not already exist
            if (typeof(w) == "undefined") {
                w = new Worker("scriptPath.extension");
            }
        3. add onmessage callback to worker
            w.onmessage = function(event){
                console.log(event.data);
            }
        4. terminate a worker
            w.terminate();
            w = undefined;
  ------------------------------
  8e::SSE
    server sent events: SSE are automatically sent (no need to poll)
    ex:
        var source = new EventSource("path");
        source.onmessage = function(event){console.log(event.data)}

    others:
        source.onopen = function()
        source.onerror = function(error)
    server side constantly sends data:
        contentType = "text/event-stream"\r\n
        \r\n
        "data: actual_data_to_send"
