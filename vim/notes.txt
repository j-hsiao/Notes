https://www.linux.com/learn/vim-101-beginners-guide-vim

##############################
#contents
##############################
1::vim
  1.1::general
    1.1.1::indentation
  1.2::modes
    1.2.1::command
      1.2.1.1::movement
      1.2.1.2::editing
      1.2.1.3::search/replace
      1.2.1.4::file manipulation
      1.2.1.5::window manipulation
      1.2.1.6::other
    1.2.2::insert
      1.2.1.1::controls
    1.2.3::last-line
      1.2.3.1::file manipulation
      1.2.3.2::window manipulation
      1.2.3.3::editing
      1.2.3.4::other
  1.3::config file

##############################
#1::vim
##############################
#1.1::general
  various modes:
    command
    insert
    last-line
  #1.1.1::indentation
    command mode:
      >> or << to indent right or left
    edit mode:
      C-t or C-d to indent right or left
    :set options
      tabstop: size of tab character
      softtabstop: whenever tab is pressed, create this space with tabs or spaces
      expandtab: do not use tab characters
      shiftwidth: indentation value (as C-d C-t or << >> in respective modes)
      autoindent: whenever new line, indent to previous line
______________________________
#1.2::modes
  ______________________________
  #1.2.1::command
    keys = commands like movement,deletion etc
    default mode
    prefix a number to execute multiple times
    NOTE: for j and k, entering a number too large does nothing
    (on 2nd line, enter 20k does not move up at all)
                                    a                   b           
    ______________________________
    #1.2.1.1::movement
      _   : move to first non-white-space character on line
      -   : move to first non-white character in line above
      +   : move to first non-white character on line below
      backspace : move back one char (wraps, unlike h)
      spacebar  : move forward one char (wraps unlike l)
      h   : left
      j   : move down
      k   : up
      l   : right
      0   : beginning of line (zero not O)
      $   : end of line
      w   : forward 1 word
      b   : backward 1 word
      G   : file end
      gg  : file beginning
      `.  : last edit
      H   : move cursor to top
      M   : move cursor to middle
      L   : move cursor to bottom
      C-d : move half page down
      C-u : move half page up
      C-b : move page up
      C-f : move page down
      C-y : scroll up one line
      C-e : scroll down one line
    ______________________________
    #1.2.1.2::editing
      i   : enter insert mode (before current character)
      I   : move to beginning of line and enter insert mode
      a   : enter insert mode (after current character)
      A   : enter insert mode at end of line
      o   : new line below and insert mode
      O   : new line above and insert mode
      r   : replace one character
      R   : replace (insert) mode
      x   : delete character
      u   : undo, repeat = change undo direction
      C-r : continue undo
            NOTE: :set cpoptions=*u* where * = anything
            changes behavior of undo (for vim anyways)
            with: u = toggle undo direction, C-r = continue in that direction
            without u: u = undo, C-r = redo
      d   : start deletion operation
        dd  : delete line
        dw  : delete word
        d0  : delete cursor to line start
        d$  : delete cursor to end of line
        dgg : delete to beginning of file
        dG  : delete to end of file
        dk  : delete current line and line above
        dj  : delete current line and line below
              note: can also just highlight region with v and then d to delete
      p   : paste text AFTER the cursor
      P   : paste text ON the cursor
      v   : highlight text (C-space for emacs)
            NOTE: this is ON cursor, inclusive for start and stop
      V   : highlight lines
      C-v : highlight columns
      y   : yank (M-w for emacs), a "copy"
      ##############################
      while in edit mode:
      C-d : unindent line
      C-t : indent line
    ______________________________
    #1.2.1.3::search/replace
      :[%]s/text/replacement/[gciI]: substitute
                                   %: all lines if present, else current line
                                   g: globally (not just first match per line)
                                   c: ask for confirmation before replacing
                                   i: case insensitive
                                   I: case sensitive
           other notes:
             searching:
               . * \ [ ^ $ are meta characters
               + ? | & { ( ) } must be escaped to use meanings
               \t : tab
               \s : white space
               \n : newline
               \r : carriage return
               \zs, \ze : start/end pattern
                          ie: :s/I want to \zskill\ze you/hug/
             replacing:
               \r: newline
               \n: null byte
               \0: entire pattern
               \1...: backreferences
      /   : search forwards
            add \c for case insensitive, \C for case sensitive
      ?   : search backwards
        NOTES:
          \< and \> represent beginning and end of words
      n   : next result
      N   : previous result

    ______________________________
    #1.2.1.4::file manipulation
      ZZ  : save and quit

    ______________________________
    #1.2.1.5::window manipulation
      C-f : scroll down full page
      C-b : scroll up full page
      C-u : scroll up (half a screen by default)
      C-d : scroll down (half a screen by default)
      C-e : scroll down 1 line
      C-y : scroll up 1 line
      C-w : switch viewport
        [N][hjkl]: move viewport in corresponding direction N times
        C-w      : cycle through
        r        : move viewports forward (cw-cw ordering)
        R        : move viewports backward (cw-cw ordering)
        c        : close viewport (and file if only one left)
        s        : split horizontal
        v        : split vertical
        >        : make viewport larger
        <        : make viewport smaller
      [i]gt      : switch to next tab
                   i: tab number to go to
      gT         : switch to previous tab
                   (tabs are their own frame so the viewports in each tab are stuck with that tab)
      z          : view manipulation (folds/cursor->screen pos)
        z        : move current line to middle of screen 
        t        : move current line to top of screen
        b        : move current line to bottom of screen
        l        : scroll right
        L        : scroll right half page
        h        : scroll left
        H        : scroll left half page
        fN[jk]   : make a fold of N lines (combine into 1 and hide)
                   note: can also highlight region with v and then use zf to fold
        o        : opens fold at the cursor by 1 level
        O        : opens all folds at cursor
        c        : close fold at cursor by 1 level
        C        : close all folds at cursor
        r        : opens all folds in file by 1 level
        R        : opens all folds in file completely
        m        : closes all folds in file by 1 level
        M        : closes all folds in file completely
        d        : delete fold at cursor 1 level
        D        : delete all folds at cursor
        E        : delete Every fold completely
        j        : next fold
        k        : previous fold
      C-z        : suspend
        
    ______________________________
    #1.2.1.6::other
      .    : redo last command
      g C-g:     : count and display words, lines, bytes, position
      q [a-z]    : macro, starts recording macro to input letter
                 : to delete, record a null macro (delete on a, enter qaq)
      "[a-z]p    : paste contents of register (for instance to add a default
                   macro to .vimrc)

      @ [a-z]    : run the macro
      

  
  ______________________________
  #1.2.2::insert
    normal text editing (only insert new text)
    use like normal typing without movement or deletion etc
    esc: exit insert, enter commandmode
    ______________________________
    #1.2.2.1::controls
      keys: type
      C-p : complete based on previous words
      C-n : complete based on next words
      backspace: move backwards, replace backspaced region or if press esc, deletes text

  ______________________________
  #1.2.3::last-line
    from command-mode, type :
    commands:
    ______________________________
    #1.2.3.1::file manipulation
      :w [filename]           : save file
      :q                      : quit current viewport(tab) (close file if only viewport with file left)
      :e [fname]              : edit file (apparently use this instead of :o is preferred)
      :o [fname]              : open file name
      :b [name/number]        : change to corresponding buffer
      :ls, :files, :buffers   : list current buffers
    ______________________________
    #1.2.3.2::window manipulation
      :split  [fn] : split view horizontally opens file fn,
                     or current file if fn is absent
      :vsplit [fn] : split vertically, as above
      :tabnew fn   : create new tab
      :tabe fn     : same as above
      :tabf fn     : similar, but uses path
      :tabs        : list current tabs
      :tabc        : close tab
      
    ______________________________
    #1.2.3.3::editing
      :ab alias text-to-set   : set alias for text
      :una alias              : unset alias for text
    ______________________________
    #1.2.3.4::other
      :syntax    : [on|off] change syntax highlighting
      :source    : run file
                   ex:
                     :source ~/.vimrc
      :sh        : open a new shell
      :!         : runs vim command?
        sort     : sorts highlighted text
      :startline, stopline ! command       : runs command on line range
      :%                                   : use entire buffer
      :h                                   : help  
    ______________________________
    #1.2.3.5::set
      paste, nopaste (paste identical to copy) etc
      expandtab, noexpandtab
      tabstop=N: change width of tab
      softtabstop=N: should be same value as shiftwidth, controls tab and backspace when expandtab is set
        tabstop and softtabstop intricacy: tabstop = width of tab, softtabstop = actual tabbing distance
          ie: tabstop calculates how many tabs/spaces to mix in
          ie: tabstop = 8, softtabstop = 4, then tabX3 = 12 spaces, but result will be 1 tab (width 8) and 4 spaces
          ie: tabstop = 8, softtabstop = 12, then tabx1 = 12 spaces (result same as above)
      shiftwidth: shift width... for tabbing
      autoindent: indent to previous line
      smartindent, cindent: insert one extra level of indentation in some cases
      wrap/nowrap : wrap long lines or not
      ignorecase : case insensitive searching
      smartcase : case sensitive if caps used, (ignorecase should be on?)
______________________________
#1.3::config file
  nmap     : macros
             ex:
               nmap <silent> <C-n> <Esc>:call ToggleHLSearch()<CR>
  /etc/vim/vimrc
  ~/.vimrc
  /usr/share/vim/.vimrc
  ex:
    " .vimrc - startup file for Vim

      syntax on
     set viminfo='1000,f1,\"500,:100,/100
     set mouse=a
     autocmd FileType html,xml,xsl source ~/.vim/scripts/closetag.vim 

  options/syntax
    " blahblah       : a comment
    set value        : set the value
      NOTE:
        in general, add "no" in front to toggle off, ie number, nonumber
      viminfo        : store history length for vim (session info persists between sessions)
      mouse=a        : enable mouse everywhere
      number         : line numbering
      relativenumber : display relative numbering
      autoindent     : inherit indent from previous lines
      expandtab      : tabs->spaces
      shiftwidth=N   : shift by N (also autoindent)
      tabstop=N      : width of a TAB character
      softtabstop=N  : if expandtab, softtabstop = shiftwidth is desired
                       space to be inserted (tabstop = 8, softtabstop = 20
                           noexpandtab)=>2 tabs, 4 spaces
      ignorecase     : ignore case when searching
      incsearch      : search shows partial matches
      smartcase      : automatically switch to case sensitive when query has caps
      wrap           : line wrapping

      title          : set window title (file being edited)

    syntax on        : turn on syntax highlighting
    autocmd          : run command on open particular file
