https://www.linux.com/learn/vim-101-beginners-guide-vim
NOTE: cygwin vi uses .virc not .vimrc

# reorganized now that I have some more experience

###############################
# contents:
###############################
-1- normal mode
    -1.1- movement
    -1.2- viewports, tabs
    -1.3- changing modes
    -1.4- editing
    -1.5- searching
    -1.6- file manipulation
    -1.7- other
-2- insert mode
-3- visual mode
-4- command line (:)
    -4.1- search and replace
    -4.2- files
    -4.3- views, tabs
    -4.4- settings
    -4.5- other
-5- config files
-6- other
    -6.1- indentation
    -6.2- registers
    -6.3- marks
    -6.4- macros
    -6.5- jump list
    -6.6- functions
        -6.6.1- variables



##############################
-1- normal mode
##############################
    ------------------------------
    -1.2- viewports, tabs, folds
    ------------------------------
        viewport
            C-w     : initiate viewport command
                hjkl    : move to viewport in corresponding direction
                HJKL    : move current viewport to farthest in that direction
                C-w     : cycle viewports
                r       : rotate windows (win1 becomes win2 etc)
                R       : rotate windows (reverse of r)
                x       : swap with next window
                c / q   : close current viewport
                o       : make current the only viewport
                s       : split horizontal
                v       : split vertical
                >       : wider
                <       : thinner
                +       : taller
                -       : shorter
                =       : equalize viewport sizes
                _       : set height (50 C-w _ = 50 lines high)
                |       : set width (50 C-w | = 50 chars wide)
        tab
            [N]gt       : go to Nth tab (1 = first), default: next
            gT          : go to previous tab
            (also see -4.3-)

        folds
            zf[N]jk     : fold N lines below/above
            zo          : open 1 level of folds at cursor
            zO          : open all folds at cursor
            zc          : close 1 level of folds at cursor
            zC          : close all folds at cursor
            zr          : open all folds by one level (filewide)
            zR          : open all folds completely (filewide)
            zm          : close 1 level of folds (filewide)
            zM          : close all foldes completely (filewide)
            zd          : delete 1 level of folds at cursor
            zD          : delete all folds at cursor
            zE          : delete all folds completely (filewide)
            zj          : jump to next fold
            zk          : jump to previous fold

    ------------------------------
    -1.3- changing modes
    ------------------------------
    gi          : enter insert mode where it was last exited
    v           : visual mode
    V           : visual mode (entire lines)
    C-v         : visual mode (column version)
    :           : enter commandline mode


    ------------------------------
    -1.4- editing
    ------------------------------
    x           : delete 1 character
    J           : join current and next line
    u           : undo (or change directions depening on settings)
    C-r         : redo (or continue in current undo direction depending on settings)
    p           : paste after cursor
    P           : paste on cursor
    y           : yank (copy)

    ------------------------------
    -1.5- searching
    ------------------------------
    /       : search for pattern forward
    ?       : search for pattern before
    n       : next result
    N       : previous result
    *       : search forward for word under cursor
    #       : search backwards for word under cursor
    g*       : search forward for word under cursor (but not whole word)
    g#       : search backwards for word under cursor (but not whole word)

    ------------------------------
    -1.6- file manipulation
    ------------------------------
    ZZ      : close and save buffer

    ------------------------------
    -1.7- other
    ------------------------------
    C-z     : suspend vim, back to terminal
    K       : look up word under cursor as a "keyword" in keywordprg (default man)
    .       : repeat
    C-g     : cur file, nlines
    g C-g   : cur pos in file (line, column, byte, word, etc)

    "[a-z]  : register (see -6.2-)
    q[a-z]  : macro (see macro section -6.4-)
    @[a-z]  : run macro (see macro section -6.4-)
    C-a     : increment number at cursor, works for hex too
    C-x     : decrement number at cursor, works for hex too
    



##############################
-2- insert mode
##############################
    C-i     : tab after cursor
    C-d     : shift left (shiftwidth)
    C-t     : shift right (shiftwidth)
    C-u     : delete current line
    C-w     : delete to previous beginning of word or begin of edit, whichever is first
    C-p     : complete based on previous words
    C-n     : complete based on next words
        (C-p C-n to scroll through list)
        continue typing once selected (no keystroke for selection)
        use C-p/C-n off the list of candidates to go back to before
        completion

    C-r [a-z]    : insert from register (interpreted)
    C-r C-r [a-z]: insert from register (as is) 
    C-v     : literal keystroke value

    ------------------------------
    -2.1- change mode
    ------------------------------
    C-o     : normal mode for 1 command
    esc     : normal mode
    C-[     : normal mode (less pinky strain? maybe?)


##############################
-3- visual mode
##############################
    select region and perform operations
    entering visual mode sets a mark
    and then text is selected to the cursor location
    based on the type of visual mode

    commands that can be repeated or work on a region
    will generally work on the selected region in visual mode

    v       : char
    V       : line
    C-v     : column

    folds:
        zf  : fold selected lines



##############################
-4- command line (:)
##############################
    ------------------------------
    -4.1- search and replace
    ------------------------------
    :[%]s/pat/replace/opt

    like sed
    % to perform on entire file
    otherwise, only on current line
    or enter command during visual mode to perform on selected lines

    regex:
        . * \ [ ^ $         are meta characters
        + ? | & { ( ) }     need escaping to use their meanings
    esapes:
        \t          tab
        \s          whitespace
        \n          new line
        \r          carriage return
        \zs, \ze    zonestart/end, only replace the area in zone

    replace:
        \r      : newline
        \n      : null byte
        \0      : entire pattern
        \1...   : back references

    opts:
        g   : globally (all occurrences in line)
        c   : ask for confirmation
        i   : case insensitive
        I   : case sensitive

    ------------------------------
    -4.2- files
    ------------------------------
        :w [filename]       write to filename if given else original file
        :up[date]           write ONLY if buffer is changed, else ignore
        :e [filename]       edit filename
        :b buff/name        switch to buffer
        :bn[ext]            next buffer
        :bp[revious]        previous buffer
        :bN[ext]            previous buffer (Next is capitalized)
        :b#                 go to "alternate" buffer (usually the last-edited buffer)
        :ls                 list buffers:
                              %: current buffer
                              #: alternate buffer
        :bd                 close buffer
        :q                  close viewport
        :qa                 close all viewports
        :qa!                force close all viewports

    ------------------------------
    -4.3- views, tabs
    ------------------------------
        ... dunno how to change tab name
        :split [filename]   : open filename in a split
        :vsplit [filename]  : open filename in vertical split
        :tabnew [fn]        : new tab with filename
        :tabe   [fn]        : same as above (tabe = tabedit)
        :tabf   [fn]        : same as above but use PATH?
        :tabs   [fn]        : list tabs
        :tabc               : close tab

        see -1.2- for more controls

    ------------------------------
    -4.4- settings
    ------------------------------
        booleans can generally be negated by prefixing with no
        Toggled by ending with !
        ex: 
            :set expandtab
            :set noexpandtab
            :set expandtab!
        :set
            acd/autochdir   : change current dir whenever open file,
                              change buffer/viewport, etc
            bo/belloff      : when not to ring the bell
            vb/visualbell   : no beeping, flash screen instead
            tabstop         : width of a tab
            softtabstop     : width inserted when pressing tab
            autoindent      : match indent of previous line
            shiftwidth      :
            expandtab       : use spaces
            nohl            : stop highlighting
            paste           : paste mode: no autoindent, etc
            smartindent     : 
            lcs(listchars)  : :h 'lcs'
            list            : display listchars
            cindent         : 
            wrap            : wrap long lines
            ignorecase      : ignore case when searching
            smartcase       : ignore case, except when caps exist
            cursorline/cul  : underline current line
            cursorcolumn/cuc: highlight current column (maybe help with checking alignment)
            wildmenu wmnu   : wild menu (filename completion) (list files in status line)
            wildmode wim    : wild completion mode:comma delimited list
                              full        : first full completion
                              longest     : longest common string
                              longest:full: longest and start wildmenu
                              list        : list available matches
                              list:full   : list matches and go to next match
                              list:longest: list matches and go to longest common
                              (C-n C-p for next/prev match or tab to cycle)
        option? prints option value
        option! will toggle if boolean type



    ------------------------------
    -4.5- other
    ------------------------------
        :ab alias value     : whenever type alias, it becomes value
        :una alias          : delete alias

        C-f                 : open commandline buffer to edit as vim buffer
        |                   : pipe, basically not useful for me
        :mks[ession]        : save current session to reload later
        :Ex[plore]          : open file explorer (current window)
        :Lex[plore]         : open on left
        :Rex[plore]         : return to/from explorer, wasn't working when I tested it
        :syntax             : on/off
                              sync
                                    minlines=N
                                    maxlines=N
                                    fromstart
                                    [ccomment]
        :source             : source a vimrc file
        :sh                 : open a shell (separate from original shell used to open vim)
        :!                  : run shell command using text as input, replace selected region with output
                            example: 
                                :!sort      -> replace text with sorted text

        :w ! cmd            : write selection to command and display output
        :r ! cmd            : insert output from cmd
        :h                  : help
                                :h pattern
                                        C-d: list topics
                                        tab: scroll above list
                                C-]:    jump to link (within help message) at cursor
                                C-t:    back to previous topic

                                mode specific prefixes:
                                        :       ex command
                                                normal mode (no prefix)
                                        v_      visual mode
                                        i_      insert mode
                                        c_      ex command mode
                                        /       search pattern
                                        '       option
                                        -       vim argument
                                NOTE: search query CTRL can be replaced with ^
                                ex:
                                  insert mode C-a:
                                        :h i_CTRL-A
                                        :h i_^a
                                        (a ^ followed by char, NOT <C-v><C-char>)
        :norm[al] cmd       : run a normal-mode command
                                may specify @[a-z] to indicate a macro
        :g[lobal]/pat/cmd   : run command globally on lines matching pat
        :pwd                : print current working directorj
        :cd path            : if path is given, change dir to that path
                              otherwise, print current dir
                              special values:
                                  %:h   current file's directory
                                  -     previous dir






##############################
-5- config files
##############################

##############################
-6- other
##############################
    ------------------------------
    -6.1- indentation
    ------------------------------
        keys:
            in normal mode: >> or <<
            in insert mode: C-t or C-d
            in visual line: > or < (to shift a block of highlighted lines)

        variables:
            tabstop     : "size" of TAB CHARACTER "\t"
                          Tab characters take whitespace up to the next
                          (n * tabstop)th position.
                          eg: at position 3, tabstop=4, then tab = 1 char size
            softtabstop : "size" of whitespace added when pressing the TAB KEY
                          whitespace will be added up to the next
                          (n * softtabstop)th position.
                          whitespace will be all tabs with trailing spaces to
                          reach the softtabstop position. (or all spaces if
                          expandtabs is set to True)
            expandtab   : don't use tab characters
            shiftwidth  : shift amount when using C-d, C-t, >>, <<, etc
            autoindent  : indent new lines to match previous line

    ------------------------------
    -6.2- registers
    ------------------------------
    ------------------------------
    -6.3- marks
    ------------------------------
        m[a-zA-Z]       set mark
        `[a-zA-Z]       go to mark (exact)
        '[a-zA-Z]       go to first non-whitespace character on same line
        :marks          list marks
        ______________________________
        special marks
            .       : last edit
            []      : beginning/end of yanked/pasted selection
            <>      : first/last line of visual selection
            '       : before last jump
            "       : last position before file was closed
            ^       : last positon insert mode (same as gi except don't enter insert mode)





    ------------------------------
    -6.4- macros
    ------------------------------
    ------------------------------
    -6.5- jump list
    ------------------------------
        commands:
            :jumps          show jump list
            :clearjumps     clear jump list

        see -1.1.1-

    ------------------------------
    -6.6- functions
    ------------------------------
    function Functionname(args)
    endfunction

    FUNCTION NAME MUST BE CAPITALIZED

    if
    elseif
    else
    endif

        ------------------------------
        -6.6.1- variables
          a:  arg of function
          g:  global
          l:  local to function
          b:  current buffer

        let var = val
        let b:var = buffer-local-value
        let [v1,v2,v3]=[v1,v2,v3]

        pseudovars:
          &var      get local OPTION if available else global
          &l:var    get local value of OPTION
          &g:var    get global value of OPTION
          @var      get register value
          $var      get environmentvar

        {var}rest: var gets evaluated and then the rest
                  example:
                  var = expand
                  {var}tab = expandtab as variable

                  does not seem to work with pseudovars

    exists("name"): checks if variable is defined

    call functions with :call
    use :<C-U>call FuncName(v:count) to pass prefix to function
        example:
            nnoremap <my><remapping> :<C-U>call MyFunctionName(v:count)
            v:count: prefix, default 0
            v:count1: prefix, default 1

        in strings, use \<escape seq> to represent the character
        example: append "hello world" to the end of the line
            execute "normal Ahello world\<esc>"

            use . to concatenate strings

        execute: run a string as a command
            example: add ${arg} spaces
                execute "normal " . arg . "a \<esc>"


        variable coercion:
            like integer promotion but applied to strings too
            int + float->float

            str + num -> num (even if str is a float str)

            str . num -> str
