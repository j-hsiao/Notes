notation notes:
	caps = a literal
	<value>: variable
	[stuff]: optional

contents:
-0- tutorial
	-0.0- useful tips
	-0.1- essentials
	-0.2- generator expressions
-1- syntax
	-1.1- variables
	-1.2- if
-2- functions
	-2.1- set
	-2.2- set_property
	-2.3- install
	-2.4- add_library 
	-2.5- add_executable
-3- cmake variables
-4- commandline
-5- ctest

------------------------------
-0- tutorial
------------------------------
	-0.0- useful tips
		cmake -L: list cache variables that would be shown in gui (check current settings)
		cmake -E: use cmake platform-independent functions like copy, move etc

	-0.1- essentials
		cmake version
			cmake_minimum_required(VERSION 3.10)

		adding preprocessor defintions from variables
		  in an input file:
				#cmakedefine VAR_NAME
			in cmakelist call configure_file

		options
			option(<some_option> <HELP_MSG> <default ON/OFF>)

		project and version
			project(Tutorial VERSION 1.0)
				(sets Tutorial_VERSION_MAJOR and Tutorial_VERSION_MINOR)

		adding targets:
			add_executable(Tutorial tutorial.cxx)
			add_library(name sources)

		adding subprojects:
			add_subdirectory(<subdir containg cmakelist>)

		linking libs:
			target_link_libraries(<target> PUBLIC | PRIVATE | INTERFACE <libs>)
				PRIVATE  : target uses lib, but interface doesn't see this
				INTERFACE: target does not use lib directly, but may take lib defined things as arguments
				PUBLIC   : private + interface

			target_link_libraries(<target> <libs>)

		preprocessor definitions:
			target_compile_definitions(target PUBLIC | PRIVATE | INTERFACE <DEFNAME>)

		include dirs:
			target_include_directories(
				<target> PUBLIC <dir> <dir>...)

		lists
			list(APPEND <listvar> [<values> ...])
			(example: add optional libs/includes to a list then pass to target_link_libraries and target_include_directories)

		configure_file(infile outfile)
			replace any @NAMEOFVARIABLE@ with the value of the variable
			inside infile and write to outfile

		target_include_directories(
			Tutorial PUBLIC "${PROJECT_BINARY_DIR}")

		C version:
			set(CMAKE_CXX_STANDARD 11)
			set(CMAKE_CXX_STANDARD_REQUIRED True)

		usage requirements
			target_compile_definitions()
			target_compile_options()
			target_include_directories()
			target_link_libraries()

			use PUBLIC, INTERFACE, PRIVATE
			and cmake will automatically handle includes etc

			examples:
				target_include_directories(
					lib
					INTERFACE
					${CMAKE_CURRENT_SOURCE_DIR})

				(now anything that uses lib will automatically include CMAKE_CURRENT_SOURCE_DIR)

		installing
			install(TARGETS <target> ... DESTINATION <dst>)
			install(FILES <file> ... DESTINATION <dst>)

		testing
			add_test(NAME <name> COMMAND <commandline> <arguments> <go> <here>

			set_tests_properties(
				USAGE
				PROPERTIES
				PASS_REGULAR_EXPRESSION
				<regex>) 

		functions
			function(name <arg> <arg> <arg>)
				do stuffs
			endfunction(name)

		platform specifics
			CheckSymbolExists
			include(CheckSymbolExists)
			check_symbol_exists(<symbol> <header> <VAR>)
			target_compile_definitions(
				<target> PRIVATE <def> <def>)

		add_custom_command( OUTPUT <fname> COMMAND <exec> <arg> ...  DEPENDS <target>)
			adds a custom command to be run
			if something depends on fname, then command will be run

		installers
			include(InstallRequiredSystemLibraries)

			set(CPACK_RESOURCE_FILE_LICENSE <license>)
			set(CPACK_PACKAGE_VERSION_MAJOR <val>)
			set(CPACK_PACKAGE_VERSION_MINOR <val>)
			include (CPack)

			cpack -G ZIP -C Debug
			make package

		if mixing shared/static libraries, static libraries will need to be built with POSITION_INDEPENDENT_CODE ON
			




			
				






	______________________________
	-0.2- generator expressions
		syntax:
			$<...>

			______________________________
			boolean expressions:
				become 0 or 1

				$<BOOL:string>
					0 if string:
						""
						case insensitive 0, FALSE, OFF, N, NO, IGNORE, NOTFOUND
						*-NOTFOUND
				$<AND:conditions,condition,...>
				$<OR:condition,condition,...>
				$<NOT:conditions>

				$<STREQUAL:s1,s2>
				$<EQUAL:v1,v2>
				$<IN_LIST:str,list>
				$<VERSION_LESS:v1,v2>
				$<VERSION_GREATER:v1,v2>
				$<VERSION_EQUAL:v1,v2>
				$<VERSION_LESS_EQUAL:v1,v2>
				$<VERSION_GREATER_EQUAL:v1,v2>
				$<TARGET_EXISTS:target>
				$<PLATFORM_ID:id1,id2,...> (see CMAKE_SYSTEM_NAME)

			______________________________
			strings
				escapes:
					$<ANGLE-R>:   a '>'
					$<COMMA>:     a ','
					$<SEMICOLON>: a ';'

				conditional:
					$<condition:truestr>
					$<IF:condition,truestr,falsestr>

				transforms:
					$<JOIN:list,string>
					$<REMOVE_DUPLICATES:list>
					$<LOWER_CASE:str>
					$<UPPER_CASE:str>

				outputs
					$<TARGET_NAME_IF_EXISTS:tgt>
					$<LINK_ONLY:...>
					$<TARGET_FILE:tgt>
					$<TARGET_PROPERTY:tgt,prop>
					$<TARGET_OBJECTS:objlib>
				




		LINK_LIBRARIES
		INCLUDE_DIRECTORIES
		COMPILE_DEFINITIONS
		

------------------------------
-1- syntax
------------------------------
strings are ""
bools: ON or OFF


	______________________________
	-1.1- variables
		use set() function
		(see functions)
		dereference: 
			normal: ${VARIABLENAME}
			environment variable: $ENV{NAME}

	______________________________
	-1.2-
		if (condition)
		else (condition)
		endif (condition)



------------------------------
-2- functions
------------------------------
cmake_minimum_required (VERSION <version>)

	______________________________
	-2.1- set
		set(<variable> <value>... [PARENT_SCOPE])
			set variable to value, in PARENT_SCOPE if given

		set(<variable> <value>... CACHE <type> <docstring> [FORCE])
			set variable to value and store in cache
			use FORCE to overwrite existing variables

			type:     values
			BOOL      ON/OFF
			FILEPATH  a file
			PATH      a directory
			STRING    a string
			INTERNAL  a string (cmake-internal string, hidden from user)

		set(ENV{<variable} [<value>])
			set environment variable

	______________________________
	-2.2- set_property
		set a named property
		set(specifier [APPEND] [APPEND_STRING] PROPERTY <name> [value1 ...])
			specifier:
				GLOBAL
				DIRECTORY [<dir>]
				TARGET [<target> ...]
				SOURCE [<src> ...]
				INSTALL [<file> ...]
				TEST [<test> ...]
				CACHE [<entry> ...]

			name: name of property
				POSITION_INDEPENDENT_CODE

		related shorthand for specifiers:
			set_directory_properties(PROPERTIES <prop> <val> [<prop> <val>...])
			set_target_properties(<targ1> [<targ2> ...] PROPERTIES <prop> <val> [ <prop> <val> ...])
			set_source_files_properties(<f1> [<f2> ...] PROPERTIES <prop> <val> [ <prop> <val> ...])
			set_tests_properties(set_tests_properties(<test> [<test> ...] PROPERTIES <prop> <val> [ <prop> <val> ...])

		APPEND
			appends to value (as a list of strings)

		APPEND_STRING
			concatenates current value with value (a longer string)
	______________________________
	-2.3- install
		install(TARGETS <target> ... )
		install({FILES | PROGRAMS} <file> ... DESTINATION <dir> ...)
			(files or non-target programs)
		install(DIRECTORY <dir>... DESTINATION <dir> ...)
			(if no dir for DIRECTORY, just makes the destination)
		install(SCRIPT <file>... )
		install(CODE <code> ...)
		install(EXPORT <export-name> DESTINATION <dir> ...)
			install XXXXConfig.cmake for find_package??
			(alternative is to export(blah) for XXXConfig.cmake (except link to things in build dir as opposed to install dir))


		general options
			DESTINATION 
				dst
				relative paths are relative to CMAKE_INSTALL_PREFIX
			PERMISSIONS
				<OWNER | GROUP | WORLD>_<READ | WRITE | EXECUTE>
				SETUID
				SETGID
			CONFIGURATIONS
				configuration to apply
			COMPONENT
				a component name (runtime, development ... ??)
			EXCLUDE_FROM_ALL
			RENAME
			OPTIONAL

		DIRECTORY options
			FILES_MATCHING PATTERN "*.h"
			EXCLUDE





	______________________________
	-2.4- add_library
		adds a library target
		if STATIC or SHARED is omitted, will be controlled by
			BUILD_SHARED_LIBS
	______________________________
	-2.5- add_executable
		adds an executable target





			




	execute_process





------------------------------
-3- cmake variables
------------------------------
generally begin with "CMAKE_"
use set function to set the values

______________________________
  -3.1- CMAKE_* variables

    CMAKE_BUILD_TYPE: < Release | RelWithDebInfo | Debug >
    CMAKE_CXX_STANDARD : c++ standard (11 for c++11)
    CMAKE_CXX_STANDARD_REQUIRED: bool, on or off
    CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}"
    CMAKE_BINARY_DIR
    CMAKE_REQUIRED_LIBRARIES
    CMAKE_INSTALL_PREFIX

PROJECT_BINARY_DIR
PROJECT_SOURCE_DIR


BUILD_SHARED_LIBS
BUILD_TESTING



______________________________
-3.1-platform
	UNIX
	WIN32
	APPLE
	MINGW
	MSYS
	CYGWIN


------------------------------
-4- commandline
------------------------------
command line options
	-DNAME=value
		set NAME to value

	-L
		list variables

  -UNAME
		remove NAME from cache

	--build <dir>
		call build in build directory

	--install 

	--prefix <prefix>
		used with --install, the installation dir

------------------------------
-5- ctest
------------------------------
ctest: run tests from add_test
	include(CTest) (after project)
		BUILD_TESTING becomes an option

		add_test(NAME <test name> COMMAND <test command or a target>)
			register test

		run tests:
			make && make test

		run individual test:
			ctest -R <regexp matching test names>
		list tests
			ctest -N 
