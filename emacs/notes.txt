contents:
  -0- general
  -1- cursor movement
  -2- windows/frames
  -3- editing commands
  -4- macros
  -5- registers
  -6- marks
  -7- miscellaneous
    -7;1- coding systems
    -7;2- buffers
    -7;3- search
    -7;4- help


------------------------------
-0- general
  C-<key> = ctrl + key
  M-<key> = meta (esc) + key, alto works too 
  *NOTE: C-[ also works as meta key

  C-u [digits]  numeric argument for command
  C-g           cancel
  C-x C-f [fn]  open a filename fn
  C-x C-s       save file
------------------------------
-1- cursor movement
  command       description
  C-p           previous line
  C-n           next line
  C-f           forward 1 char
  C-b           back 1 char
  C-e           end of line
  C-a           beginning of line

  M-f           forward 1 word
  M-b           back 1 word
  M-a           beginning of sentence
  M-e           end of sentence
  M-<           to beginning
  M->           to eof

------------------------------
-2- windows/frames
  command       description
  C-v           scroll down       numeric argument: scroll x lines
  M-v           scroll up         numeric argument: scroll x lines
  C-l           move line with cursor to middle, top, bottom in cycle 

  C-M-v         scroll other window

  C-x 0         kill this window
  C-x 1         kill other window
  C-x 2         split horz
  C-x 3         split vert

  C-x 5         frame commands
    0           kill this frame
    1           keep this frame
    2           new frame



  C-x o         move to other window

------------------------------
-3- editing commands
  command       description
  C-k           yank the rest of this line, after the cursor
  M-k           yank rest of sentence, after cursor
  C-x C-l       lowercase region
  C-x C-l       uppercase region

  C-d           delete char
  M-d           kill next word
  M-backspace   kill previous word
  C-/           undo

  C-w           cut (kill)
  M-w           copy 
  C-y           paste (yank)

------------------------------
-4- macros
------------------------------
-5- registers
------------------------------
-6- marks
  C-space           set mark
------------------------------
-7- miscellaneous

  ______________________________
  -7;1- coding systems
    C-x <ret> p         set input/output coding schemes (dos, unix)
                        allows use of cygwin bash when M-x shell
    C-x <ret> f         set saving coding scheme (dos, unix)
  ______________________________
  -7;2- buffers
    C-x C-b             list buffers
    C-x b name          switch to buffer

    C-x s               interactive which files to save? (iterate through changed buffers)
  ______________________________
  -7;3- search
    C-s                 search for text (forward)
    C-r                 search for text (reverse)
    M-%                 text to replace search query
  ______________________________
  -7;4- help
    C-h c [char seq]    brief help (ie which command is bound to the seq)
    C-h k [char seq]    more help in new window

movement:
C-
  a: beginning
  e: end
  p: prev line
  n: next line
  f: forward 1char
  b: back 1char

scroll:
C-v: scroll down
M-v: scroll up

window:

C-x 3: split vert
C-x 2: split horz
C-x 1: only window
C-x 0: delete this window

emacs runtime options:
  --reverse-video
  --no-splash


modes:
M-x python-mode
    etc

#------------------------------
#            help
#------------------------------
C-h f : function
C-h b : bindings
C-h k : keys (enter key sequence)
C-h v : describe variable




#------------------------------
#        auto fill
#------------------------------
C-x f :
    set fill column
M-q:
    fill current paragraph
M-o M-s :
    center the text (by fill column)
    



#------------------------------
         miscellaneous
#------------------------------

C-x f
    set fill column (70 is default)
M-q
    fill paragraph(try to add new lines etc to match the fill column
    as maximum row length, (might be useful for automatically reducing
    length of very long lines like in code with lots of arguments and
    stuff etc, or automatically re-indenting arguments to match with
    the opening argument parentheses)

M-o M-s
    center the line according to the fill column

C-x $
    selective display, use numerical argument
    and lines with > N lines of indentation will
    not be displayed
    no numeric argument to turn back off





#--------------------------------------------------
#                    registers
#--------------------------------------------------
saved things for retrieval later

______________________________
position
    C-x r [space] [registervalue]
        saves file and position to register
    C-x r j [registervalue]
        jumps to position and file (if file closed, tries to re-open it)

______________________________
text
    C-x r s [register value]
        copy text
    C-x i s [register value]
        insert text
    M-x append-to-register <enter> [register value]
    C-x r + [TEXT register value]
        append region to register [register value]
    M-x prepend-to-register <enter> [register value]
    
    Notes:
    add C-u before each to also remove text from the buffer (otherwise just copies it)
______________________________
number
    C-u [number] C-x r n [register]
        save number to register
    C-u [number] C-x r + [register]
        increments [register] by [number]
    C-x r i [register]
______________________________
rectangle
    C-x r r [register value]
        copy rectangle
    C-x r i [register value]
        insert rectangle
    
    Notes:
    add C-u before each to also remove text from the buffer (otherwise just copies it)
______________________________
macros
    C-x C-k x [register] (macro to register)
        save last macro to register
    C-x r j [register]
        perform macro


#--------------------------------------------------
#                     macros
#--------------------------------------------------
f3
C-x (
    start macro
f4
    stop macro (during definition)
    execute last macro (after definition)
C-x )
    end macro
C-x e
    execute last macro

NOTE:
    add C-u N to repeat N times for the execute macro keys
C-u f3
    execute macro + continue appending to macro
C-u C-u f3
    append to macro (don't execute previous steps)
C-x C-k r
    run last macro on each line of region

C-x C-k n
    name the last macro (session duration)
    (must be unique or error and no change)
C-x C-k b
    bind last macro to key sequence (session duration)
    reserved values: C-x C-k ? where ? is in [0-9, A-Z]

    will ask if wish to bind before binding if already exists a binding
    (for reserved bindings, C-x C-k  is assumed, so only need to type
     C-x C-k b [reserved binding key] to automatically register as C-x C-k [reserved binding key])

M-x insert-kbd-macro
    insert macro defintion as lisp code into buffer
    add C-u to also save key-bindings
