##############################
contents
##############################
-1-drives and devices
-2-variable manipulations
-3-file manipulations
-4-regexp
-5-stream manipulation
  -5.1-sed
  -5.2-grep
-6-inputs
-7-redirection
-8-completion
-9-ps1
-10- tput
-11- completion

##############################
-1- drives and devices
##############################
lsblk: list block devices
blkid: list blkid (UUID, partition types etc
   can use for editing /etc/fstab

   fstab:
       entry:
           device   mountpoint   filesystemType   options  dump  pass
               device (/dev/XXX or UUID=SOME_BLOCK_DEVICES_UUID_NO_QUOTES)
               mountpoint a path in the file system (/media/myblkdevice)
               filesystemType: like nfat, ntfs, ext4, vfat, auto, etc
               options: see below
               dump: enable/disable backups (0 is usual (disabled))
               pass: fsck check partition for errors on boot?
                     root device = 1, other = 2(if check) or 0 (don't check)
                                      
           options:
               defaults    : (rw, suid, dev, exec, auto, nouser, async
               sync/async  : how IO to filesystem should be done
               auto/noauto : fs is automatically mounted on boot
               dev/nodev   : interp or don't interp block special devices on filesystem
               suid/nosuid : permit/block suid and sgid bits operations
               ro          : mount read-only
               rw          : mount read-write
               user        : any user can mount filesystem (implies noexec, nosuid, nodev)
               nouser      : only root can mount

mount: (sudo only)
       ex: mkdir mountpoint1
           sudo mount device_from_lsblk mountpoint1
       (can now access device_from_lsblk at mountpoint1,
        such as usb etc)
umount


##############################
-2-variables manipulation
##############################
variables truncation:
  ${varname:startpos:runlength}
  ie:
    > a='i wub u'
    > echo ${a:2:3}
    wub


var as varname:
  ${!VAR}: dereference VAR and treat that as the variable name
  same as:
    eval \${${VAR}}
  ex:
      > varToPrint=PATH
      > echo ${!varToPrint}
      *prints path*

remove pattern from beginning/end
    ${varname#pattern}
        remove pattern from beginning (short)
    ${varname##pattern}
        remove pattern from beginning (as long as possible)
    ${varname%pattern}
        remove pattern from end (short)
    ${varname%%pattern}
        remove pattern from end (as long as possible)
    ${varname/pattern/replacement}
        replace pattern with replacement
    ${varname//pattern/replacement}
        global replace pattern with replacement
    ${varname/#pattern/replacement}
        replace pattern match at beginning with replacement
    ${varname/%pattern/replacement}
        replace pattern match at end with replacement


var as bool
    rethought:
        ${VAR[:]+/-val}: use val in the case where VAR is + or -, else ${VAR}
                         the : indicates that VAR='' is negative
                         so +/- = var exists
                         :+/:-  = var is non-empty (not exist is also empty)



    ${VAR+somestr}  -> somestr if var is set else ''
                       acts like "and"
    ${VAR-somestr}  -> var if var is set else somestr
                       acts like "or"
    (the extra : means consider var to be "unset" if it is set to empty string)
    ${VAR:+somestr}
    ${VAR:-somestr}

    examples
    a=
    b=hello

    expression      result

    ${a+thing}      thing
    ${b+thing}      thing
    ${c+thing}      '' (empty string)

    ${a:+thing}     '' (empty string)
    ${b:+thing}     thing
    ${c:+thing}     '' (empty string)

    ${a-thing}      ${a}
    ${b-thing}      ${b}
    ${c-thing}      thing

    ${a:-thing}     thing
    ${b:-thing}     ${b}
    ${c:-thing}     thing
    



##############################
-3-file manipulation
##############################
shuf->shuffle lines in a file (ex training list)



##############################
-4-regexp
##############################
------------------------------
basic
------------------------------
char: itself
*: sequence of 0 or more of previous expr

.: anything
^: beginning if at beginning, else a ^
$: end of line (if at end)
[list]: any char in list
[^list]: anything not in list

GNU extensions:
\+ : same as * but 1 or more
\? : 0 or 1
\{n\}: match n repetitions
\{n,m\}: match between n and m repetitions
\{n,\}: n or more repetitions
\(regexp\): group
reg1\|reg2: or
\number   : n = 1-9, match previous group
\n        : newline
\char     : if char is special, use char, else
            use \char

------------------------------
extended regexp
------------------------------
?, +, {}, (), | have special meaning by default
                (need to backslash if want it to be literal)
                (basic: need to backslash for special meaning)



------------------------------
special classes
------------------------------
[[:special_class:]]
classes:
  alnum: alphanumerics
  alpha: alphabetical
  blank: space/tab
  cntrl: control characters (ascii 000-037, 177 etc)
  digit: digits
  graph: graphical (alnum + punct)
  lower: lowercase
  pirnt: printable
  punct: ascii punctuation
  space: space (tabs, formfeed, newlines, etc)
  upper: uppercase
  xdigit: hexdigits

------------------------------
extensions
------------------------------
\w: word
\W: non-word
\b: word boundary
\B: not word-boundary
\s: whitespace
\S: not whitespace
\<: word start
\>: word end
\`: start of pattern space (multiline, only 1st line whereas ^ is all lines)


------------------------------
escapes:
------------------------------
\a: bell
\f: form feed
\n: newline
\r: carriage return
\t: tab
\v: vertical tab
\cx: control-x
\dxxx: decimal value (binary)
\o: octal value (binary)
\b: backspace (but conflicts with above \b so excluded for sed)




##############################
-5-stream manipulation
##############################
  ##############################
  -5.1-sed notes
  ##############################
  ------------------------------
  options:
  ------------------------------
  -n, --quiet, --silent
  suppress output

  -e
  script expression

  -f
  script file

  -i
  edit in-place

  -l N
  length for l command

  -b, --binary
  binary mode

  -E, -r, --regexp-extended
  extended regexps





  ------------------------------
  script:
  ------------------------------
  [addr]X[options]

    ------------------------------
     general
    ------------------------------


    ------------------------------
    addr:
    ------------------------------
    optional
    indicate range in file to operate on (inclusive)
    format = START,STOP
      possible values:
      integer: line number n (start at 1)
    /exp/f      : exp = regexp (all lines that match),
                    NOTE:
                    / can also be any \char ie
                    \;regexp;
                  f: GNU extension
                     I: case insensitive
                     M: multiline

    !           : not in address space
                  ie:
                    1,5!p (don't print lines 1-5)
    n~step      : start at n, then take steps
    
    ------------------------------
    commands:
    ------------------------------
    q             : quit (only takes a single address)
    s/a/b/f       : substitute a with b, flags = flags
                    /: usually /, but can actually be any character
                       (will need \ if want to use it in expression or replacement)
                    a: regexp expression
                    b: can contain \N: N=1-9 reference to previous \(\) match
                                   & : whole matched portion
                                   GNU sed extension:
                                   \L: lowercase until \U or \E
                                   \l: next into lowercase
                                   \U: upper until \L or \E
                                   \u: next to uppercase
                                   \E: stop case conversion
                    f: flags
                       g      : globally
                       n      : a number, replace the nth match
                       P      : print new pattern space
                       w fname: write to filename
                       i/I    : case insensitive
                       m      : GNU extension, multiline

    a text        : append text after line
    c text        : replace region with text
    i text        : insert text before line
    F             : print filename of current file
    w fname       : write patternspace to filename
    z             : empty pattern space
    {cmd1;cmd2...}: group of commands (use same address space)
    y/a/b/        : like tr (ab = string of chars)
                    if char == a[i], then replace with b[i]
    l n           : print unambiguously (blankspace print with escaped values), n = wrap length
                    n = GNU sed extension
    r fname       : insert file contents

    #pattern-space related
    d             : delete pattern space
    g             : replace patternspace with hold space
    h             : reploace hold with patternspace
    n             : replace patternspace with next line of input
    p             : print pattern space

    D             : delete patternspace up to first newline
    G             : appends line from hold space to pattern space with newline before it
    H             : appends line from patternspace to hold space with newline before it
    N             : appends next line from file with \nbefore it
    P             : prints line from patternspace til first newline
    


  ------------------------------
  execution
  ------------------------------
  2 data buffers: "pattern space", "hold space"
  steps:(in python)
  f = file(fname, 'r')
  pattern = ''
  hold = ''
  while more_lines():
      l = f.readline()
      pattern = l.strip()
      execute_commands(pattern_space)

  ##############################
  -5.2-grep
  ##############################
    --color=auto
    see -4-regexp
    -A[n] print n lines after matches
    -B[n] print n lines before matches

    useful options:
    -v: inverted search (print things that don't match)
    -F: interpret pattern as list of literal string patterns
    -f: use file to get patterns
    -x: match entire line (automatically surround pattern with ^$)
    -i: ignore case
    -n: line number
    -r: recursive
    -m: max-matches
    -z: change entire file into a single line

    can also use with find to make it recursive and control depth:
    find . -maxdepth blah -mindepth 1 -type f -exec 'grep pattern {}'


##############################
-6-inputs
##############################
  read
    -u(fd) read from filedescriptor instead

  heredocs
    someCommand << FILE_DELIMITER_OF_YOUR_CHOICE
    text etc
    can also use variables:
    $var1
    FILE_DELIMITER_OF_YOUR_CHOICE

    NOTE:
      if vars are in quotes, will not expand
  herestring
    someCommand <<< stringvalue_or_dereference
    *NOTE:
        herestring causes a new-line to be appended to the end
        use echo -n if you don't want that

  ______________________________
  redirection
  ______________________________
  ------------------------------
  output

    SRC>DEST
      SRC:
        & : stdout and stderr
        FD: a filedescriptor (0-9)
        empty : defaults to 1 (stdout)
      DEST:
        FNAME : a file name
        &FD   : to file descriptor
  ------------------------------
  input

    DEST<SRC
      DEST:
        FD : a file descriptor (0-9) for the file
      SRC:
        FNAME: a file name
  ------------------------------
  pipe

    CMD1 | CMD2
    redirects cmd1 stdout to cmd2 stdin
##############################
-7-redirection
##############################
  command orig>new <inputsource
    notes:
      orig by default is stdout (1)
      new: to use fd, use &fd
        ie: stderr to stdout:
            echo hello 2>&1
      inputsource: some input source
    ordering:
      think of ordering like variable assignment
      instead of pipe building...
      ie: 2>&1 1>foo.txt
        stderr is assigned to stdout
        stdout is assigned to foo.txt
        therefore stderr printed to terminal
        and stdout printed to file
      ie: 1>foo.txt 2>&1
        stdout assigned to foo.txt
        stderr assigned to stdout (which currently points to foo.txt)
        thus both stdout and stderr go to foo.txt

##############################
-8-completion
##############################
    code into ~/.bash_completion
    use command name to determine completion for arguments
    completion priority order:
        1: 
            if empty:
                use any with -E option
            if a path:
                use for corresponding path
                use any with -D option
        2: glob expansions
        3: -w options (split by IFS, expanded etc)
        4: functions with -F invoked
        5: functions with -C invoked
        6: filtered with -X option
        7: prefix/suffix from -P and -S added to candidates
        8: if no candidates, -o dirnames supplied to complete,
            directory completion attempted
    ______________________________
    builtins:
    compgen [option] [word]
        print completions for word
    complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat]
        [ -W wordlist ] [-F function] [-C command] [-X filterpat]
        [-P prefix] [-S suffix] name [name ...]
    complete -pr [-DEI] [name...]

    -p: print to reuse as input
    -r: remove specification for each name
    -D: default completion
    -E: empty completion
    -I: initial non-assignment word or after delim (like ;, |)
        -DEI is order of precedence
    -o comp-option:
        bashdefault: use default when no matches
        default: use readline's filename when no matches
        dirnames: use dirname when no matches
        filenames: specify completions are filenames (so process like filenames), used with -F
        noquote: don't quote if filenames
        nosort: don't sort
        nospace: don't append space to end of the completion
                 ie: | is the cursor
                    cmd arg[tab] -> cmd complete|
                    vs
                    cmd arg[tab] -> cmd complete |
        plusdirs: add dir completion
    -A action
        alias: alias names
        arrayvar: array variable names
        binding: key binding names
        builtin: names of shell builtin commands
        command: command names
        directory: directory names
        disabled: disabled shell builtins
        enabled: enabled shell builtins
        export: exported shell vars
        file: file names
        function: shell funcs
        group: group names
        helptopic: topics to help
        hostname: hostname from file specified by HOSTFILE var
        job: job names
        keyword: shell keywords
        running: running jobs
        service: service names
        setopt: valid args to set -o
        shopt: option names accepted by shopt
        signal: signal names
        stopped: stopped jobs
        user: user names
        variable: shell vars
    -C: command to execute in subshell, output = completions
    -F: bash func, args are:
        cmd word preword
        ex:
            python -m asdf[tab]
            -> $1 = python
            -> $2 = asdf
            -> $3 = -m
        COMP_WORDS: completion words array
        COMP_CWORD: current word
        COMPREPLY : the completion candidates
    -G pat expand for completions
    -P: prefix prepended to completions
    -S: suffix to append to completions
    -W: list of words split by IFS to be used as completion
    -X: remove matches to pattern
        prepend with a ! to remove non-matches
    NOTE:
        pats (-G, -W, -X) should be quoted

    example using -F method:
        compfunc () {
            do stuff
        }
        complete -o filenames -o nospace -o bashdefault -F compfunc cd

------------------------------
-9- ps1
------------------------------
escapes:
  \a          bell
  \d          date (weekday, month, date)
  \D{format}  date format (strftime)
  \e          escape (033)
  \h          hostename to first .
  \H          host name
  \j          current number of jobs
  \l          shell device name
  \n          new line
  \r          carriage return
  \s          name of shell
  \t          time HH:MM:SS (24hr)
  \T          \t, (12hr)
  \@          HH:MM (12hr)
  \A          HH:MM 24hr
  \u          username
  \v          bash version
  \w          working directory
  \W          basename of working dir
  \!          history number for this command
  \#          command number of command
  \$          # if uid 0 (root) else $
  \nnn        octal character code
  \\          backslash
  \[          begin non-printing characters
  \]          end non-printing characters
  \e[stuff    code for formating color, bold, underline, etc
    \033[stuff
              stuff:
                [code];[code]...m

    (use echo -e to check colors)
    note: \[ and \] should be used around the color code stuff

format codes:
  \e codes
    0         full reset

    1         bold
    2         dim
    4         underlined
    5         blink
    7         reverse (foreground/background)
    8         hidden (passwords)

   2X         reset corresponding value 1-8

color codes:
  XY          X: foreground/background, light/dark
                              dark      light
              foreground      3         9
              background      4         10


              Y: color
              0   black
              1   red
              2   green
              3   yellow
              4   blue
              5   magenta
              6   cyan
              7   white
              9   default

  38;5;X      88/256 color for foreground, X = 1-256 (no leading 0)
  48;5;X      88/256 color for background, X = 1-256 (no leading 0)
------------------------------
-10- tput
------------------------------
ncurses tool for interacting with terminal

tput <command>

  longname      print long name of terminal
  lines         number of lines
  cols          number of cols
  colors        number of colors

------------------------------
-11- completion
------------------------------

sidenote: IFS=\n ->
  IFS='
  '
  IFS=$'\n'
  IFS=$(printf '\n\b')

compgen [args] <tocomplete>
  generate completions:
complete [args] <command>
  add completion to command


multiple arguments may be given
order of usage:
  -W 'wordlist' (split by IFS)
    "Shell quoting is honored within the string, in order to provide a
    mechanism for the words to contain shell metacharacters or characters
    in the value of IFS. Each word is then expanded using brace expansion,
    tilde expansion, parameter and variable expansion, command substitution,
    and arithmetic expansion, as described above (see Shell Expansions)."
    basically, can use variables to avoid IFS clashes
    a=$(printf 'hello\nworld')

    -W '${a} other words'-> 3 items
      1: hello
      world
      2: other
      3: words
  -F <function name>
  -C <command name??>
    variables:
      COMP_LINE: current commandline
      COMP_POINT: index of cursor relative to beginning
      COMP_KEY: key used to invoke completion
      COMP_TYPE: int: type of completion
        TAB: normal
        '?': multiple tabs
        '!': "listing alternatives on partial word completion" ???
        '@': list completions if word not unmodified
        '%': menu completion
    functions also get:
      COMP_WORDS: array variable with words of command line
      COMP_CWORD: index into COMP_WORDS (current cursor position)

    $1: name of command
    $2: word being completed
    $3: word before $2

    functions:
      COMPREPLY array contains possible matches
    commands:
      print completions, 1 per line to stdout, backslash to escape newline

  -X filter
    & is replaced with text of word being completed
    \& for literal
    leading ! negates pattern

  -P, -S: prefix/suffix added to each item

  -o dirnames

  -o plusdirs

  example:

  function to() {
    myroot=/cygdrive/c/Users/$USER
    target="${1}"
    case "${target}" in
      research)
        target="Desktop/research"
        ;&
      *)
        if ! cd "${myroot}/${target}" 2>/dev/null
        then
          printf "bad target ${target}"
        fi
        ;;
    esac
  }
  function to_() {
    target=$(tr '[:upper:]' '[:lower:]' <<<"${2}")
    myroot=/cygdrive/c/Users/$USER
    readarray -t candidates < <(find "${myroot}" -maxdepth 1 -mindepth 1 -type d -iname "${target}*"  | sed 's/.*\///')
    candidates+=(research)

    lower=()
    for x in "${candidates[@]}"
    do
      lower+=("$(tr '[:upper:]' '[:lower:]' <<<"${x}")")
    done

    readarray -t COMPREPLY < <(compgen -W '"${lower[@]}"' "${target}")
    if [ "${#COMPREPLY[@]}" -eq 1 ]
    then
      i=0
      while [ "${lower[${i}]}" != "${COMPREPLY[0]}" ]
      do
        i=$[ i + 1 ]
      done
      COMPREPLY[0]="${candidates[${i}]}"
    fi
  }
  complete -F to_ to
