contents
-1- syntax
	-1.1- rule
	-1.2- variable
		-1.2.1- flavors
		-1.2.2- automatic
	-1.3- line continuation
	-1.4- phony
	-1.5- comments
	-1.6- including
	-1.7- wildcards
	-1.8- commands
-2- functions
	-2.1- wildcard
	-2.2- patsubst


______________________________
-1- syntax
	______________________________
	-1.1- rule
		target ... : prereqs ...
			recipe
			...
		target ... : prereqs ; recipe
			recipe
			...

		NOTE: rules per target can be separated and multiple targets can
		be used.
		eg.
			target1: prereq1
			target1: prereq2 | order-only1
		is the same as
			target1: prereq1 prereq2 | order-only1

		implicit rules:
			*.o: defaults to a corresponding *.c

		the first target is the "default goal"
		following recipe lines MUST use tab character

		prereqs:
			normal | order-only
			order-only only orders target, doesn't check for out-of-date.

	______________________________
	-1.2- variable
		define:
			varname = info
			varname ?=
			varname :=
			varname ::=
			varname :::=
			varname +=
			varname !=

		______________________________
		-1.2.1- flavors:
			= recursively defined
				Will be expanded again
				eg.
					foo = $(bar)
					bar = $(asdf)
					asdf = wut
					$(foo) -> wut
					any variable references are deferred for later.
			:= or ::= simply expanded
				literal as is, no expansions after initial
				GNU: the same
				POSIX: only ::= is defined
				Any variable references are defined at the point of definition.
			:::= immediately expanded
				Mix of = and ::=, recursive at point of definition
				after definition, $ is escaped to $$ and then acts as
				recursive again.
			?= conditional
				define if not already defined

		dereference:
			$(varname)

			($$ for literal $)

		______________________________
		-1.2.2- automatic
			$@: target of the rule
			$<: first prerequisite
			$?: all prerequisites newer than target or all prereqs
			$^: all normal prereqs, duplicates removed
			$+: like $^ but no duplicate removal
			$|: all order-only prereqs

		To get dirname or just basename, put the char in parens
		and append D or F respectively
			eg: $(^D) = dirnames of all prereqs

		SIDENOTE:
			all the automatic variables are still variables
			ie $< is the same as $(<)

	______________________________
	-1.3- line continuation
		use trailing backslash \
		use $\ to have new line without whitespace
			ex:
				original:
					var := one$\
						word
				->
					var := one$ word
				->
					var := oneword        # ("$ " expands variable called " " to nothing)
	______________________________
	-1.4- phony
		specify a target is phony:
			.PHONY: name
		PHONY targets will not get confused with files of the same name
	______________________________
	-1.5- comments
		comments start with #
	______________________________
	-1.6- including
		include other make files (like C #include)
			include filenames...
	______________________________
	-1.7- wildcards
		*, ?, [...]
		* results in sorted for that expression only
		wildcard happens in rules, but not variables
		use $(wildcard <pattern...> <pattern...> ...) to get expansion
		when setting variable
	______________________________
	-1.8- commands
		[options]bash command
		commands go after the rule.
		prefix:
			@: don't echo
			-: ignore exit status (keep going even if fail)
			+: always execute, even if -n, -t, or -q flags


______________________________
-2- functions
	call a function with $(<funcname> args...)
	______________________________
	-2.1- wildcard
		$(wildcard args...): wildcard expansion on each arg
		raw wildcard no match = use raw pattern
		wildcard function no match = blank
	______________________________
	-2.2- patsubst
		$(patsubst pat,replace,vals)
		eg.:  $(patsubst %.c,%.o,$(wildcard *.c))
