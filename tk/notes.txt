sources:
https://tkdocs.com/tutorial/morewidgets.html

from tkinter import *
from tkinter import ttk

*NOTE: import tkinter does not really give all the stuff
also cannot import tkinter.thing
example:
from tkinter import StringVar           ok
import tkinter.StringVar                ERROR
import tkinter;tkinter.StringVar        ERROR


(if 
##############################
contents
##############################
:1: general
:2: classes
  :2a: Tk
  :2b: Vars
    :2b1:StringVar
    :2b2:BooleanVar
  :2c: ttk.Frame
  :2d: ttk.Entry
  :2e: ttk.Label
  :2f: ttk.Button
  :2g: ttk.Checkbutton
  :2h: ttk.Radiobutton
  :2i: ttk.Combobox

:3: geometry manager
  :3a: grid




##############################
:1: general
##############################
  ------------------------------
  example:
  ------------------------------
    from tkinter import *
    from tkinter import ttk
    
    def calculate(*args):
        try:
            value = float(feet.get())
            meters.set((0.3048 * value * 10000.0 + 0.5)/10000.0)
        except ValueError:
            pass
        
    root = Tk()
    root.title("Feet to Meters")
    
    mainframe = ttk.Frame(root, padding="3 3 12 12")
    mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
    mainframe.columnconfigure(0, weight=1)
    mainframe.rowconfigure(0, weight=1)
    
    feet = StringVar()
    meters = StringVar()
    
    feet_entry = ttk.Entry(mainframe, width=7, textvariable=feet)
    feet_entry.grid(column=2, row=1, sticky=(W, E))
    
    ttk.Label(mainframe, textvariable=meters).grid(column=2, row=2, sticky=(W, E))
    ttk.Button(mainframe, text="Calculate", command=calculate).grid(column=3, row=3, sticky=W)
    
    ttk.Label(mainframe, text="feet").grid(column=3, row=1, sticky=W)
    ttk.Label(mainframe, text="is equivalent to").grid(column=1, row=2, sticky=E)
    ttk.Label(mainframe, text="meters").grid(column=3, row=2, sticky=W)
    
    for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5)
    
    feet_entry.focus()
    root.bind('<Return>', calculate)
    
    root.mainloop()

root: Tk()
handle on the root window



##############################
:2:classes
##############################
general functions:
    grid(column = M, row = N, sticky = (N, W, E, S...))
        row/column: where to place the item
        sticky    : alignment (north, south, east, west)
        

    columnconfigure(X, weight=_, padx = _, pady = _)
    rowconfigure(Y, weight=Y, padx = _, pady = _)
        these two affect window resize behavior (expand to fill space)
        these indicate the row/column to expand/resize

    winfo_children()

    focus()
    
    configure(*args, **kwargs)
        args: name of a property to describe
        kwargs: set the property
        no args or kwargs: describe everything(properties, valid values, etc)

    ##############################
    general configurations:
    ##############################
        width/height    : (ex: 5, 5c, 5i, 5p) (cm, inches, printer's points)
        cursor          : 
        style           : themes
        padding         : like html padding,
                          all: 1 number
                          horz, vert: 2 numbers
                          left top right bottom: 4 numbers
        borderwidth     : border width
        relief          : border style (flat, raised, sunken, solid, ridge, groove)
        class           : 
        takefocus       : 
        
        text            : 'TEXTSTRING'
        textvariable    : StringVar()
        image           : PhotoImage(file = 'path2file.jpg')
        compound        : str:
                          text, image (only text or image)
                          center, top, left, bottom, right
                              (put text at position on image)
        wraplength      : pixel length of text to wrap
        anchor          : n, ne, e, se, s, sw, w, nw, center
                          if item has more space than needed
                          in the grid, anchor to these positions
        justify         : left, center, right
        font            : TkDefaultFont
                          TkTextFont
                          TkFixedFont
                          TkMenuFont
                          TkHeadingFont
                          TkCaptionFont
                          TkSmallCaptionFont
                          TkIconFont
                          TkTooltipFont
        foreground      : name ('red'), hex (#ff340a)
        background      : name ('red'), hex (#ff340a)

        default         : active: default, normal: normal (for appearance)
        onvalue         : value for on  (like checkbutton)
        offvalue        : value for off(like checkbutton)
        value           : value (ie for radio button)
        values          : for multiple values (like Combobox), a list of values
        show            : example: Entry->show a different character (ie type a password)
        


    ##############################
    general functions
    ##############################
    state(['disabled'])            disable the widget
    state(['!disabled'])           enablethe widget

    instate(['disabled'])          True if disabled
    instate(['!disabled'])         True if not disabled
    instate(['!disabled'], cmd)    if not disabled, do cmd

    flags:
        active        disabled        focus
        pressed       selected        background
        readonly      alternate       invalid






    bind('key description', callback)
        callback takes 1 arg: an "event" (e has params, often x, and y)

        description syntax:
            modifier-modifier-type-detail
            modifiers:
                Control
                Alt
                Shift
                Lock
                Extended
                Button1/B1
                Button2/B2
                Button3/B3
                Button4/B4
                Button5/B5
                Mod1, M1, Command
                Mod2, M2, Option
                Mod3, M3
                Mod4, M4
                Mod5, M5
                Meta, M
                Double
                Triple
                Quadruple
            types:
                FocusOut            Activate
                Gravity             ButtonPress, Button
                KeyPress, Key       ButtonRelease
                KeyRelease,         Circulate
                Leave,              CirculateRequest
                Map,                Colormap
                MapRequest          Configure
                Motion              ConfigureRequest
                MouseWheel          Create
                Property            Deactivate
                Reparent            Destroy
                ResizeRequest       Enter
                Unmap               Expose
                Visibility          Focusin
                                    <<ComboboxSelected>> (for comboboxes)


            example Double-B1

        http://www.tcl.tk/man/tcl8.5/TkCmd/bind.htm



NOTE: for each
just do:
    from tkinter import ttk
    ttk.CLASSNAME().configure().keys() to see fields
    or 
    ttk.CLASSNAME().configure()[field] to see explanations

:2a: Tk()
    the root window
    methods:
        title(titlestring)
        mainloop()
    notes:
        not "themed"=>background may be different


:2b: vars
    :2b1:StringVar()
        a string variable for linking to widget
    :2b2:BooleanVar()
        a boolean variable for linking to widget

:2c: ttk.Frame(parentWindow, padding="3 3 12 12")
    an empty frame (rectangle)
    
:2d: ttk.Entry(parent, width, textvariable)
    text entrybox
    textvariable: where to store the text input
    width->characters
    methods:
        get(): get value
        delete(start, stop):
            'end' = last index
        insert(0, 'somestring'):
            insert new text at index
    states:
        invalid
        readonly (can't type but can highlight/copy)
    validate:
        'none'
        'key' (on each keystroke)
        focus/focusin/focusout,
        all
        2 callbacks:
            validate: return 0 or 1 (True or False)
            invalidcommand: runs when invalid
        


:2e: ttk.Label(parent)

:2f: ttk.Button(parent, text=TEXT, command=FUNC)
    a button,
    methods:
    invoke: invoke the callback
    
:2g: ttk.CheckButton(parent, configs)
    a checkbutton
    methods:
        invoke (see above)
    instate:
        alternate = 3rd value, (ie when you see some checklists
        and check some but not all)

:2h: ttk.Radiobutton
    instate:
        alternate

:2i: ttk.Combobox
    for choosing from a list or enter own value maybe
    selectionclear()
    get()
    set(val)
    current():      return selected index
    current(index): select the index


##############################
:3: gemoetry manager
##############################
:3a: grid
    
    idea: columns and rows (put on graph paper)
    ------------------------------
    widget.grid
        column     :
        row        : 
        columnspan :
        rowspan    :
        sticky     : any of 'nswe' (any combination, stretch to be stuck to corresponding spot)
        padx       : 'v1 v2' (if v2 omited, same as v2)(pad within grid) (borderline in master)
        pady       : 'v1 v2'(if v2 omited, same as v1)(pad within grid)(borderline in master)
        ipadx      : same as aboves but
        ipady      : as if borderline is 0 (if frame is 20x20, pad = 10, allocated a 30x30 grid, ipad = stretch
                     pad = don't)
        NOTE:
            this is for putting widget into parent's row/column spot

    ------------------------------
    widget.{row, column}configure
        weight  (growth rate for resizing window)
        minsize (column/row should not shrink beyond that
        pad     (padding values, 'v1, v2, v3, v4' etc
        NOTE:
            this is used for splitting up the widget into row/col


    ------------------------------
    padding
        master.configure(padding = 'values')(pad within grid)
        (padding at edges of master so can wrap a widget in Frame and use Frame's padding

    ------------------------------
    grid_slaves()    : returns map of gridded slaves
    grid_info()      : gives gridinfo on the widget
    grid_configure() : change grid configuration values
    ------------------------------
    forget([list of widgets]): removes them, forgets grid settings
    remove([list of widgets]): removed them, remembers grid settings
