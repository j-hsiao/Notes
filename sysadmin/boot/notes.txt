contents
-1- partitions
	-1.1- /
	-1.2- /boot /efi
	-1.3- /home
	-1.4- swap
	-1.5- /data
	-1.6- /var
	-1.7- /etc
-2- bootable media
	-2.1- GPT
		-2.1.1- Windows
		-2.1.2- Linux
-3- GUI
-4- UEFI
	-4.1- Secure Boot
-5- Encryption
-6- LVM




------------------------------
-1- partitions
------------------------------
Disks (flash drive, usb, hdd, ssd, etc) can be split into partitions.
Generally, 2 formats:
	MBR: old, max 4 primary partitions
	     must have extended partition to have more
	     Only primary partitions are bootable
	     2TB partition size limit
	GPT: new, up to 128 partitions
	     partitions are marked with a "Type" flag
	     Mark EFI FAT32 for bootable partition.

	volume: a "block" that has a file system (could consist of multiple partitions)
	partition: a physical chunk in a disk

	https://wiki.archlinux.org/title/Partitioning
	https://man.archlinux.org/man/file-hierarchy.7


	------------------------------
	-1.1- /
	------------------------------
	The root directory.

	This partition holds the os.  Must be sufficient to
	for system
		boot
		restore
		recover
		repair

	GPT GUID: 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709
	gdisk type 8304
	MBR: "Linux" ID 83

	generally 23-32 GiB

	------------------------------
	-1.2- /boot /efi
	------------------------------
	contains vmlinuz, initramfs, boot loader config, data before kernel is run
	If UEFI, can mount EFI system partition to /boot (use it as /boot)
	Recommend 1 GiB, usually never exceed 4 GiB

	If boot and esp are separate, then esp will be mounted at /efi

	Otherwise, use Extended Boot Loader (XBOOTLDR) Partition
	GPT GUID: C12A7328-F81F-11D2-BA4B-00A0C93EC93B (efi)
	GPT GUID: BC13C2FF-59E6-4262-A352-B275FD6F7172 (?not efi?)
	gdisk: type ea00
	fdisk: xbootldr
	MBR: ea

	------------------------------
	-1.3- /home
	------------------------------
	normal users' home directories, possibly shared with other systems.
	might even be a network fs

	GPT GUID: 933AC7E1-2EB4-4F13-B844-0E14E2AEF915
	gdisk: 8302
	fdisk: home
	MBR: "Linux" 83

	------------------------------
	-1.4- swap
	------------------------------
	swap file: easiy to resize
	"equally performant"
	Swap can be shared between OS (unless hibernate)

	old advice: 2x RAM
	Current: ~ 4 GiB
	if want hibernate, then same as RAM

	GPT GUID: 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F
	Linux swap
	gdisk: 8200
	fdisk: swap
	mbr: 82

	------------------------------
	-1.5- /data
	------------------------------
	optional, can just use /home
	"Linux filesystem"
	GPT GUID: 0FC63DAF-8483-4772-8E79-3D69D8477DE4
	MBR: 83

	------------------------------
	-1.6- /var
	------------------------------
	"variable data" spool directories, files admin, logging, cache
	persistent

	"Keeping it in a separate partition avoids running out of disk space due to fluky logs. etc"
	"It exists to make it possible to mount /usr as read-only"

	/var is frequently written, many small files, choose appropriate fs

	recommends 8-12 GiB
	"Users of NVIDIA, Wayland, GDM, have enough to fit Video Memory"

	type: Linux variable data | Linux /var
	GPT GUID: 4D21B016-B534-45C2-A9FB-5C16E091FD2D
	gdisk: 8310
	MBR: 83


	------------------------------
	-1.7- Other directories
	------------------------------
	Other directories, usually not separate partition:
	/etc                  MUST be part of / OR mounted early in initramfs
	                      System configs
	/usr                  MUST be part of / OR mounted early in initramfs
	/root                 Home dir of root user, should be on /
	                      allows root login even if /home is not mounted
	/srv                  general server payload
	/tmp                  small temp files, usually a tmpfs
	                      Use the TMPDIR env var
	                      shared between users so should only use mkstemp/mkdtemp
	/var/tmp              larger persistent temp files

	/run                  tmpfs for system packages
	/run/log              runtime system logs
	/run/user             per-user runtime dirs
	                      use XDG_RUNTIME_DIR env var
	/usr                  vendor-supplied OS resources
	/usr/bin              shell binaries
	/usr/ilb              static private vendor data
	/usr/lib/arch-id      dynamic libs, aka $libdir
	/usr/share            shared resources between multiple packages
	/usr/share/doc        documentation for OS or system packages
	/var/cache            persistent system cache
	/var/lib              persistent system data
	/var/log              persistent logs
	/var/tmp              persistent larger tmp files

	/bin /sbin /usr/sbin  symlinks to /usr/bin
	/lib                  symlink to /usr/lib
	/lib64                symlink to $libdir
	/var/run              symlink to /run

	~/.cache              user level cache
	~/.config             user configs
	~/.local/bin          user binaries
	~/.local/lib          private vendor data
	~/.local/lib/arch-id  public dynamic libs
	~/.local/share        shared resources between packages $XDG_DATA_HOME
	~/.local/state        app state, $XDG_STATE_HOME






------------------------------
-2- bootable media
------------------------------
Bootable media generally means:
	------------------------------
	-2.1- GPT
	------------------------------
	1. GPT
		------------------------------
		-2.1.1- Windows
		------------------------------
			Start an admin prompt (windows+x a)
			1. Download the ISO, note the size
			2. Create a partition:
				diskpart
					Start interactive prompt for disk managing.
					help | help <command args etc...>
					list disk
					select disk N
					create volume simple size=(Size of the iso) [disk=N] [align=N]
						NOTE: don't create an EFI partition here
						because windows does not allow interacting with EFI partition
						so do NOT do create partition efi
					list part
					select part N
					filesystems
					format fs=FAT32 LABEL=label quick
					set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b # set as efi
					set id=ebd0a0a2-b9e5-4433-87c0-68b6b72699c7 # set as data
				disk management
					might need to clear or shrink existing partition
					right click unallocated
					create a FAT32 partition
			Extract iso into the partition after creating as FAT32
			Use 7z or something to extract ISO into the EFI
		------------------------------
		-2.1.2- Linux
		------------------------------

	2. MBR: TODO maybe

------------------------------
-3- GUI
------------------------------
linux
	display manager: graphical login screen, starts the desktop
	                 environment  after login
	                 examples: gdm, lightdm, sddm
	window manager: the windows after login
	                examples: i3, mutter kwin
	login manager: usually same as display manager, handles user login
	               sessions or multiple users etc

------------------------------
-4- UEFI
------------------------------
	https://wiki.debian.org/SecureBoot

	UEFI is a boot format
	Generally, it searches for a EFI partition FAT32 formatted
	for .efi files that are executables to perform booting.
	Generally should be located at /EFI/$vendor/$bootloader.efi
	ex: debian:
		amd64 \EFI\debian\grubx64.efi
		i386  \EFI\debian\grubia23.efi
		arm64 \EFI\debian\grubaa64.efi
		armhf \EFI\debian\grubarm.efi

		amd64  \EFI\boot\bootx64.efi
		i386   \EFI\boot\bootia23.efi
		arm64  \EFI\boot\bootaa64.efi
		armhf  \EFI\boot\bootarm.efi
		nscv64 \EFI\boot\bootriscv64.efi

	------------------------------
	-4.1- Secure Boot
	------------------------------
	Secure boot is basically registering a public key to use
	for verifying the efi files and kernel modules
	Unsigned kernel modules (like drivers (nvidia) etc)
	would be disallowed

		*history*: Most only had microsoft keys registered and
		secure boot enabled by default = cannot run linux.
		workaround = a "shim" signed by microsoft containing
		other keys

	Check secure boot state:
		sudo mokutil --sb-state

		also can look at /var/log/syslog or something
		or sudo dmesg
			"loading X.509 cert 'name of cert' ..."

		------------------------------
		-4.1.1- MOK
		------------------------------
		MOK = Machine Owner Key
			mokutil can queue keys for registering, but
			they must be verified at boot time

		check registered keys
			sudo mokutil --list-enrolled
			sudo mokutil --test-key path/to/key

		default location:
			debian:
				/var/lib/dkms/mok.key
				/var/lib/dkms/mok.pub
			ubuntu:
				/var/lib/shim-signed/mok/
					MOK.der
					MOK.pem
					MOK.priv

		* some packages (like oracle virtualbox) expect ubuntu loc

		Generate a mok manually:
			sudo dkms generate_mok

		custom MOK:
			openssl req -nodes -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -days 36500 -subj "/CN=My Name/"
			openssl x509 -inform der -in MOK.der -out MOK.pem

			* 4096 not supported 2022-06-21, fail to boot, use 2048 for now


		Auto generated if not exist when making kernel module
			DKMS (Dynamic Kernel Module System) builds/compiles modules
			individually.  Compile happens on user machine, cannot use
			any distro's private key to sign. Must use MOK

			DKMS auto generation configuration:
			/etc/dkms/framework.conf:
				mok_signing_key="/var/lib..MOK.priv"
				mok_certificate="/var/lib/...MOK.der"
				sign_tool="/etc/dkms/sign_helper.sh"

			/etc/dkms/sign_helper.sh
				#!/bin/bash
				/lib/modules/"$1"/build/scripts/sign-file sha512 /root/.mok/client.priv /root/.mok/client.der "$2"

		Enrolling the MOK:
			sudo mokutil --import /var/lib/dkms/mok.pub
		check keys queued for confirmation
			sudo mokutil --list-new
		reboot
			select enroll MOK

		------------------------------
		Manually signing a kernel
		------------------------------

			VERSION="$(uname -r)"
			SHORT_VERSION="$(uname -r | cut -d . -f 1-2)"
			MODULES_DIR=/lib/modules/$VERSION
			KBUILD_DIR=/usr/lib/linux-kbuild-$SHORT_VERSION

			sudo apt install sbsigntool

		------------------------------
		Manually signing a module
		------------------------------
------------------------------
-5- Encryption
------------------------------
display devices and partitions:
	lsblk

Encrypt partition:
	cryptsetup luksFormat /dev/partition

open encrypted partition:
	cryptsetup open --type luks /dev/partition name


------------------------------
-6- LVM
------------------------------
