contents
-1- ArgumentParser




______________________________
-1- ArgumentParser
    __init__(**kwargs):
        kwargs:
            prog:                   name of program (sys.argv[0]) avaiable with "%(prog)s" in help message
            usage:                  override usage message generated by argparse
            description:            descr of program, will line-wrap
            epilog                  display after argument help
            parents                 list of argparses to "inherit" from
            formatter_class         RawDescriptionHelpFormatter
                                        description is given as raw, already formatted
                                    RawTextHelpFormatter
                                        help text is given as raw, already formated
                                    ArgumentDefaultsHelpFormatter
                                        add defaults to argument help
                                    HelpFormatter
                                        default 

                                    NOTES:
                                        RawTextHelpFormatter inherits from RawDescriptionHelpFormatter
                                        so can create a subclass from one of RawText or RawDescription
                                        and ArgumentDefaults
                                        (can have either raw desc, raw desc AND help, but not raw help but not desc)
            prefix_chars            prefix chars for files that contain arg definitions
                                    example:
                                        '+'
                                            then options are ++name, +n
            fromfile_prefix_chars   args from a file
                                    format for file is 1 token per line
                                    example:
                                        if:
                                            fromfile_prefix_chars='@'
                                            printf 'hello\nworld domination' > a
                                        equivalent:
                                            python myprogram.py @a
                                            python myprogram.py hello 'world domination'
                                    
            argument_default        default argument value when not given, default : None
                                    can use argparse.SUPPRESS to have no default, attr isn't added to namespace
            conflict_handler        conflicting options resolution
                                    'resolve': override old with newer options
                                    'error':   give an error
            add_help                True to automatically add a -h/--help argument
                                    usually for use along with parents kwarg (if parent and child both add -h/--help
                                    will error, though can alternatively use conflict_handler='resolve')
        
    add_argument(*names, kwargs):
        names:
            optional argument:
                --name: full name, refer to variable as this (args.name)
                -n    : shorthand
            positional argument:
                name
        kwargs:
            help:       help message
            default:    default value when argument is omitted
            const:      a constant
            metavar:    nickname for argument, used in help message
            action:     'store'         : default, store argument's value
                        'store_const'   : use the value of const
                        'store_true'    : True if option is given else False
                        'store_false'   : opposite of above
                        'append'        : append arg to list
                        'append_const'  : append constant to list
                        'count'         : count occurrences

                        custom          : subclass argparse.Action
                            implement:
                                __call__(parser, namespace, values, option_string = None):
                                    parser          : the parser
                                    namespace       : the namespace to eventually return
                                    values          : values to save
                                    option_string   : the option_string used
                                    
                                __init__(option_strings, dest, nargs = None, **kwargs):
                                    option_strings: corresponding option strings
                                    dest: name to store values under
            nargs:      N: list of length N
                        ?: 0 or 1, if flag specified and 0 given, use const value
                                   if flag specified and 1 given, use that value
                                   if flag unspecified: use default
                        *: 0 or more
                        +: 1 or more
                        argparse.REMAINDER ('...'): everything else afterwards
            dest:       name to store argument as
            type:       type of argument
            choices :   collection of choices to choose from for values
            required:   argument is required to have

    parse_args(args = sys.argv[1:])
        parse the argument
        will cause exit on failure to parse
        or -h/--help, can be try/excepted

    add_subparsers(**kwargs):
        NOTE: this is named poorly
            should be more like subparser_adder()
        kwargs:
            title               title for subparsers group
            description         for subparser group
            prog                prog
            parser_class        class for new subparsers
            action              action to be taken when encountered
            option_string       
            dest                store subcommand under this name, default None (don't store)
            help                help msg for subparser group
            metavar             present available sub-commands in help
