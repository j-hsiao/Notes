-0- general
	-0.0- observations
	-0.1- events
-1- figure
-2- axes
	-2.1- Axes plotting methods
	-2.2- other methods
-3- canvas
-4- artists
-5- animations
	-5.1- blitting

______________________________
-0- general
	from matplotlib import pyplot as plt
	plt.show() shows all figures and
	waits for them to close

	In matplotlib:
		canvas = window
		figure = collection of axes
		axes = a single plot
		artist = something that is drawn (returned by plotting functions)
			NOTE: axes and figures are artists too

	The process of drawing has a few stages.
	First the memory buffer(s) representing the drawn figure(s).
	Next, the finished drawing must be displayed.

	In generally, methods only draw and do not display.  If ion(), then
	they will display too.

	------------------------------
	-0.0- observations
		pause causes drawing of any non-animated artists.

		artists will draw any non-animated child artists when they are drawn (probably).

		artists behave differently depending on whether animated or not.
			set_animated(True|False)

			nothing explicitly drawn:
				result: always blank

			Draw axes only:
			fig.draw_artist(axes):
			fig.draw_artist(ax)
			              figure      axes        plot    result
			animated?     n           n           n       drawn
			              n           n           y       axes only
			              n           y           n       drawn
			              n           y           y       axes only
			              y           n           n       drawn
			              y           n           y       axes only
			              y           y           n       drawn
			              y           y           y       axes only

			draw line before axes:
				ax.draw_artist(line)
				fig.draw_artist(ax)
			              figure      axes        plot    result
			animated?     n           n           n       drawn
			              n           n           y       axes only
			              n           y           n       drawn
			              n           y           y       axes only
			              y           n           n       drawn
			              y           n           y       axes only
			              y           y           n       drawn
			              y           y           y       axes only

			draw line after axes?:
				fig.draw_artist(ax)
				ax.draw_artist(line)
			result: always drawn

			NOTE: fig.draw_artist(line) instead of ax.draw_artist(line) has the same
			      exact outcomes.

		fig.canvas.blit() seems to actually cause rendering of the canvas to
		the screen.


	______________________________
	-0.1- events
		callbacks are 'connected' to event types:
			axes_enter_event
			axes_leave_event
			button_press_event
			button_release_event
			close_event
			draw_event
			figure_enter_event
			figure_leave_event
			key_press_event
			key_release_event
			motion_notify_event
			pick_event
			resize_event
			scroll_event

		enums:
			MouseButton
			back = 8
			forward = 9
			left = 1
			middle = 2
			right = 3

		event base classes:
			Event
				base class
				attrs: name, canvas, guiEvent
			LocationEvent:
				has screen location
				attrs:
					x, y: (from bottomleft of canvas)
					inaxes: the axes the mouse is within
					xdata, ydata: x,y for within the axes
		Events
			KeyEvent(LocationEvent, Event):
				keyboard press
				attrs:
					key: the pressed key
						'ctrl', 'alt', 'super' prefixes
						delimited by +
			MouseEvent(LocationEvent, Event):
				attrs:
					button: MouseButton enum, or 'up', 'down' (scrolling)
					key: key pressed while mouse
					step: >0 = up, <0 = down
					dblclick: bool
			PickEvent(Event):
				Pick an artist
				attrs:
					mouseevent: the MouseEvent that caused PickEvent
					artist: the picked artist
					other: other attrs depending on artist type
			ResizeEvent(Event):
				attrs:
					width, height (of the canvas)

______________________________
-1- figure
	A figure is a collection of axes (plots) arranged in some way.
	useful methods:
		The figure.bbox gives information about the size of the figure
			bbox = fig.bbox
			bbox.x1 == bbox.x0 + bbox.width
			bbox.y1 == bbox.y0 + bbox.height

			bbox.height == fig.get_dpi() * fig.get_figwidth()
			bbox.width == fig.get_dpi() * fig.get_figheight()



		add_subfigure
		add_subplot(rows, cols, idx)
		           (idxnum) (3-digit num: <rows><cols><idx>)
		subplots(rows, cols, sharex=False, sharey=False, squeeze=True):
			sharex/y: [True | False | 'row' | 'col']
			squeeze: squeeze dimensions out of return array
				1 subplot -> return subplot as is
				1d subplot (row or col == 1) -> list of subplots
				2d subplots-> 2d array of subplots
		gca()
			get current axes
		get_*
			axes()
				get list of axes
			figheight()
			figwidth()
		savefig(
			fname, dpi=['figure'|float], format=None, metadata=None,
			bbox_inches=None, pad_inches=0.1,
			facecolor='auto', edgecolor='auto', backend=None,
			orientation='landscape|portrait',
			papertype='letter|legal|executive|ledger|a0-10|b0-10'
			transparent=[True|False],
			pil_kwargs=dict(extra-PIL.Image.Image.save kwargs)
			)
		sca(ax):
			set current axis
		show()
			like cv2.imshow(1), just display no wait
		sup[title|xlabel|ylabel](text, ha, va)
			add top-level title, xlabel, ylabel
		text(x, y, txt, fontdict=None):
			add text
		waitforbuttonpress(timeout=-1):
			wait for a button press
			True if button
			False if mouse
			None if timed out
			<0 = no timeout

______________________________
-2- axes
	------------------------------
	-2.1- Axes plotting methods
		plot(x, [y, [format]], scalex=True, scaley=True, data=None, **kwargs)
			x, y: list of x,y coordinates
				if y not given, then use x as y and index as x
				or keys for data argument to get the x,y coordinate
				x,y can also be 2d to plot multiple lines.  (broadcasted)
			format:
				'<colorchar><marker><linestyle>'
				colors:
					b   blue
					g   green
					r   red
					c   cyan
					m   magenta
					y   yellow
					k   black
					w   white
					#rrggbb (if no marker/linestyle)
				markers:
					o   a circle
					.   point
					,   pixel
					v   triangle_down
					^   triangle_up
					<   triangle_left
					>   triangle:right
					1   tridown
					2   triup
					3   trileft
					4   triright
					8   octagon
					s   square
					p   pentagon
					P   plus(filled)
					*   star
					h   hexagon
					+   plus
					x   x
					X   x(filled)
					D   diamond
					d   thin_diamond
					|   vline
					_   hline
				linestyles:
					-   solid
					--  dashed
					-.  dash-dot
					:   dotted
			kwargs:
				lw, linewidth
				ls, linestyle
				marker

		errorbar
			plot with error bars
		scatter
			scatter plot
		plot_date
			use floats as dates
		step
			step plot
		loglog
			log scaling on x and y
		semilogx
			log scaling on x
		semilogy
			log scaling on y
		fillbetween
			fill between horizontal curves
		fillbetweenx
			fill between vertical curves
		bar(numlabel, counts) -> matplotlib.container.BarContainer
			numlabel determines position of each bar.
			counts determines height of each bar.
		barh
			horizontal bar plot
		bar_label
			label a barplot
		hist(data, ...) ->
				(counts,
				bin_edges,
				matplotlib.container.BarContainer)
			plot a histogram
		stem
			stem plot
		eventplot
			identical parallel lines at points
		pie
			pie chart
		stackplot
			stacked area plot??
		broken_barh
			horizontal sequence of rectangles
		vlines(xs, ystart, ystop)
			vertical lines at each x
		hlines(ys, xstart, xstop)
			horizontal lines at each y
		fill
			fill polygons

	------------------------------
	-2.2- other methods
		set_title('title')



______________________________
-3- canvas
	figure.canvas

	draw: re-draw non-animated artists, NOTE: this will clear
	      any animated artists out of the buffer.
	blit: render region of current buffer

	get_width_height(*, physical=False)

	copy_from_bbox(bbox):
		Get a portion of rendered window.
		NOTE: this can be np.asarrayed

	generate events:
		close_event(guiEvent=None)
		button_press_event(x, y, button, dblclick=False, guiEvent=None)
		button_release_event(x, y, button, guiEvent=None)
		key_press_event(key, guiEvent=None)
		key_release_event(key, guiEvent=None)
		leave_notify_event(guiEvent=None)
		motion_notify_event(x, y, guiEvent=None)
	mpl_connect(eventname, func)
		eventname: see -0.1- events
		func: function that takes a single event object
		Return a connection id for the function
	mpl_disconnect(cid):
		remove callback of the cid
------------------------------
-4- artists
	lines.Line2D (plot())
		set_data
		set_xdata
		set_ydata

	container.BarContainer (hist(), bar())

	collections.PathCollection (scatter())
		set_offsets

	image.AxesImage (imshow())
		set_data

	text.Annotation (annotate())
		update_positions

	patches.Rectangle (barh())
		set_angle
		set_bounds
		set_height
		set_width
		set_x
		set_y
		set_xy

	patches.Polygon (fill())
		set_xy

	patches.Ellipse (add_patch())
		set_angle
		set_center
		set_height
		set_width

	text.Text (set_title(), text())
		set_text

------------------------------
-5- animations
	from matplotlib import animation
	2 methods:
	------------------------------
	FuncAnimation
		each artist would need to be updated invidually
		generate data for initial showing,
		modify on successive frames
		more efficient (only 1 artist, then modifies)

		steps:
			1. plot a static plot, but save artists returned by plot funcs
			2. define function to update artists (artist.set_*)
			3. create a FuncAnimation
			4. plt.show(), or Animation.save

		ex.
			def update(framenum):
				data = data_for_[framenum]
				artist.set_data(data)
				return (artists, to, draw)


	------------------------------
	ArtistAnimation
		generate iterable artists to draw each frame.
		less efficient (many different artists), but more flexible...???
		basically like successive show() etc

		ex:
			artists = []
			for framenum in whatever:
				framedata = data_to_show_at[framenum]
				artists.append(axes.plot(*framedata))

			animation.ArtistAnimation(fig=fig, artists=artists, interval=1)
			plt.show()

	------------------------------
	-5.1- blitting
		partial rendering of permanent unchanging parts
		then draw the changing parts on top

		1. draw the bg, exclude artists (set_animated)
		2. save copy of RBGA buffer
		3. restore RGBA buffer
		4. redraw animated artists (axes.draw_artist, figure.draw_artist)
		5. show result

		check for blitting support:
			fig.canvas.supports_blit

		ex.
			# create objs
			fig, ax = plt.subplots()

			# create artist, require explicit drawing
			artist = ax.plot(data, animated=True)

			# create window
			plt.show(block=False)

			# ensure everything is drawn/sized properly etc
			plt.pause(0.1)

			# get the bg
			bg = fig.canvas.copy_from_bbox(fig.bbox)

			ax.draw_artist(artist)

			fig.canvas.blit(fig.bbox)

			while animating:
				fig.canvas.restore_region(bg)
				ln.set_ydata(...)
				ax.draw_artist(ln)
				fig.canvas.blit(fig.bbox)

				fig.canvas.flush_events()
					OR
				plt.pause(.1)

		NOTE: plt.pause REQUIRES artists to be not animated
		(artist.set_animated(False)). Otherwise, the artist will
		disappear during the pause.
		but... at that point, the animation should just
		remain True and don't need to ax.dra_artist(ln)
