-0- general
-1- setup.py
  -1.1- writing setup.py
  -1.2- using setup.py
-2- config
-3- manifest
-4- extending distutils
-5- setuptools (enhanced distutils)

______________________________
-0- general
  Modules are created with distutils:
  ______________________________
  terms
    pure python module: a .py file
    extension module:   a shared lib (.so, .pyd, ...)
    package:            a dir of modules

  others:
    wheel format:
      1. setuptools, not distutils
      2. pip install wheel
      (or pip install build and then python -m build)

      This creates a wheel(built) and a tar.gz/zip (source) dist files.

______________________________
-1- setup.py
  ______________________________
  -1.1- writing setup.py
    import distuit
    from distutils.core import setup
    setup(...)
      kwargs:
        py_modules=[...]
          list of python modules (module notation, not file)
          These are the names that you would use when importing it
          post-install.  The default is to search in the same dir
          as the setup.py.  The search dirs can be modified with the
          package_dir argument below.  There is NO need to add the 
          the __init__.py modules.  __main__.py WILL require adding
          explicitly here (unless you use packages instead)
        packages=[...]
          Similar to py_modules, but list the packages instead.  Any .py
          files IMMEDIATELY under these packages will be added.  NO SUB
          PACKAGES WILL BE PROCESSED.  These must be listed separately.
        package_dir={'install_package_name': 'source_directory'}
          package: dirname, an empty package = the "root" package,
          prefixed to all packages.
        ext_modules: [distutils.core.Extension(...),...]
          Extension('name', ['source... filenames'])
            swig_opts=['',...]
              swig options to use swig (.i) files
            include_dirs=[''...]
              include directories for compilation
            define_macros=[(name,value),...]
              macros to define:
                '#define {0} {1}'.format(tup).
                '#define {0}' if tup[1] is None
            undef_macros['',...]
              macros to undef
        ext_package='name'
          prefix package for all ext_modules
        libraries=['',...]
          libraries to link to
        library_dirs[''...]
          directories for link libraries.
        extra_compile_args=['',...]
          ...
        extra_link_args=['',...]
          ...
        depends=['',...]
          list of filename dependencies.
          recompile if any of these change.
        requires=[''...]
          'name[<!=>version,...]
          NOTE:
            for setuptools' setup(), install_requires may be preferred.
            when built with install_requires, pip will actually install
            these requirements when installing the wheel
        provides=['',...]
          python module/package
          'pkg' or 'pkg (major.minor)'
        obsolete=['',...]
          same format as provides
        scripts=['',...]
          list of python scripts to install
        package_data={'pkgname':'glob'}
          list of package data files
        data_files=[('installdir', ['fnames'...])...]
          extra files to install as is

        name=''
          This is the name for pip install/uninstall, but not necessarily
          import.
        version=''
        author=''
        author_email='
        maintainer=''
        maintainer_email=''
        url=''
        description=''
        long_description=''
        download_url=''
        classifiers=['',...]
        platforms=['',...]
        keywords=['',...]
        license=''

    set DISTUTILS_DEBUG to non-empty for debug info.

  ______________________________
  -1.2- using setup.py
    python setup.py args...
    python setup.py -h

    notable options:
      --dry-run     don't actually do anything
      --help-commands

    commands:
      build             build everything needed to install
      build_py          "build" pure Python modules (copy to build directory)
      build_ext         build C/C++ extensions (compile/link to build directory)
      build_clib        build C/C++ libraries used by Python extensions
      build_scripts     "build" scripts (copy and fixup #! line)
      clean             clean up temporary files from 'build' command
      install           install everything from build directory
      install_lib       install all Python modules (extensions and pure Python)
      install_headers   install C/C++ header files
      install_scripts   install scripts (Python or otherwise)
      install_data      install data files
      sdist             create a source distribution (tarball, zip file, etc.)
                            --formats=gztar,zip,...
      register          register the distribution with the Python package index
      bdist             create a built (binary) distribution
      bdist_dumb        create a "dumb" built distribution
      bdist_rpm         create an RPM distribution
      bdist_wininst     create an executable installer for MS Windows
      upload            upload binary package to PyPI
      check             perform some checks on the package

______________________________
-2- config
  setup.cfg
  config files that users may need to modify.
  (raw text, no "str" types or anything etc)
  syntax:
    [command]       (see -1.2-)
    option=value
    ...
  eg:
    [build]
    build_base=myval

______________________________
-3- manifest
  specify all files to include
  MANIFEST.in   template for MANIFEST file.
                1 command per line:
                  include *.txt
                  recursive-include dirname pat pat ...
                  prune dirname
  MANIFEST      file of names.

______________________________
-4- extending distutils
  from distutils.command.module import commmandclass
  from distutils.core import Command
    class newclass(commandclass or Command,...):
      impl

  setup(cmdclass={'command': cls...},...)

______________________________
-4- setuptools (enhanced distutils)
  from setuptools import setup
  from setuptools.config import read_configuration
