#!/bin/bash
# NOTE: this just starts a process that waits until the given time to
# display a reminder.  The scheduled reminder will not persist on system
# reboot.

# TZ environment variable seems to affect
# python weirdly from cygwin
MYENV=()
if hash cygpath >/dev/null 2>&1
then
	MYENV+=(TZ=)
fi

for candidate in py python python3
do
	if hash "${candidate}" &>/dev/null
	then
		PYEXE="${candidate}"
		break
	fi
done
if [ -z "${PYEXE}" ]
then
	echo "Failed to find python." >&2
	exit 1
fi

HELP=
JOB=
for item in "${@}"
do
	case "${item}" in
		-h|--help)
			HELP=1
			JOB=1
			;;
		-j|--job)
			JOB=1
			;;
	esac
done

PARSER_SCRIPT="
p = argparse.ArgumentParser()
p.add_argument('message', help='message to display')
p.add_argument('-t', '--title', default='remind', help='message title')
p.add_argument('-d', '--delay', type=float, help='seconds of delay')
p.add_argument(
    '-a', '--at',
    help=(
        'time to remind at.  Times are split between ymd and hms'
        ' hms: MM, HH:MM, HH:MM:SS'
        ' ymd: dd, mm-dd, YYYY-mm-dd'
        ' Using ymd only will keep the current hms.'
    )
)
p.add_argument(
    '-j', '--job', action='store_true',
    help=(
        'run as a job, otherwise run without job as background'
        ' Running as a job means backgrounding the remind script.'
        ' This makes it show up when using \"jobs\" at the commandline'
        ' which allows you to check if reminders are scheduled.'
        ' However, this also means that fg would put it in fg, and on'
        ' cygwin, it cannot be placed back into bg so if you'
        ' accidentally fg, you might need to cancel and re-schedule it.'
    )
)
"

DATE_PARSE="
    datepat = re.compile(r'(?P<ymd>\d*-\d*)? ?(?P<hms>\S*:\S*)?')
    m = datepat.match(args.at)
    if not m:
        raise ValueError('Bad at format.')
    m = m.groupdict()
    if all([v is None for v in m.values()]):
        try:
            int(args.at)
        except ValueError:
            raise ValueError('Bad target reminder time')
        else:
            m['hms'] = args.at.strip()
    then = now = datetime.datetime.now()
    if m['hms']:
        hms = list(map(float, m['hms'].split(':')))
        if len(hms) == 1:
            then = now.replace(minute=int(hms[0]), second=0, microsecond=0)
        elif len(hms) == 2:
            then = now.replace(hour=int(hms[0]), minute=int(hms[1]), second=0, microsecond=0)
        elif len(hms) == 3:
            then = now.replace(
                hour=int(hms[0]), minute=int(hms[1]), second=int(hms[2]),
                microsecond=int((hms[2] - int(hms[2])) * 1000000))
        else:
            raise ValueError('Bad hour/minute/second')
    if m['ymd']:
        ymd = list(map(int, m['ymd'].split('-')))
        if len(ymd) == 1:
            then = then.replace(day=ymd[0])
        elif len(ymd) == 2:
            then = then.replace(month=ymd[0], day=ymd[1])
        elif len(ymd) == 3:
            then = then.replace(year=ymd[0], month=ymd[1], day=ymd[2])
        else:
            raise ValueError('Bad year/month/day')
"

PYDEBUG="
import sys
import argparse
import datetime
import time
import re

${PARSER_SCRIPT}
try:
    args = p.parse_args()
except SystemExit:
    sys.exit(1)
if args.at:
${DATE_PARSE}
    print('now   :', now, file=sys.stderr)
    print('target:', then, file=sys.stderr)
    tdelta = max(0, (then-now).total_seconds())

    hours, secs = divmod(tdelta, 3600)
    minutes, secs = divmod(secs, 60)
    secs, nano = divmod(secs, 1)
    nano *= 1000000000
    print(
        'delay : {:02d}:{:02d}:{:02d}.{:09d}'.format(
            *map(int, (hours, minutes, secs, nano))), file=sys.stderr)
elif args.delay:
    now = time.time()
    tnow = datetime.datetime.fromtimestamp(now)
    print('now   :', tnow, file=sys.stderr)
    print('target:', tnow + datetime.timedelta(seconds=args.delay), file=sys.stderr)
    hours, secs = divmod(args.delay, 3600)
    minutes, secs = divmod(secs, 60)
    secs, nano = divmod(secs, 1)
    nano *= 1000000000
    print('delay : {:02d}:{:02d}:{:02d}.{:09d}'.format(
        *map(int, (hours, minutes, secs, nano))), file=sys.stderr)
"


PYSCRIPT="
import time
import argparse
import tkinter as tk
import datetime
import re
import platform


try:
    from tkinter import messagebox
except ImportError:
    import tkMessageBox as messagebox

${PARSER_SCRIPT}
args = p.parse_args()

if args.delay:
    now = time.time()
    expect = now + args.delay
    while now < expect:
        time.sleep(expect - now)
        now = time.time()
elif args.at:
    ${DATE_PARSE}
    tdelta = (then-now).total_seconds()
    while tdelta > 0:
        time.sleep(tdelta)
        tdelta = (then - datetime.datetime.now()).total_seconds()

r = tk.Tk()
r.title('remind')
# using withdraw() would hide it from view. When working with
# something else, there would be no visual indication of the reminder
# except when alt+tab and see it in the list or no other windows open
# and would obscure it when it is created.

if platform.system() == 'Windows':
    r.attributes('-toolwindow', True, '-topmost', True)
else:
    try:
        r.attributes('-topmost', True)
    except Exception:
        traceback.print_exc()
# Make main window small and hide behind popup(assumed to be at screen
# center).
r.geometry('1x1')
r.update_idletasks()
r.geometry('+{}+{}'.format(
    (r.winfo_screenwidth() - r.winfo_width())//2,
    (r.winfo_screenheight() - r.winfo_height())//2
))

messagebox.showinfo(title=args.title, message=args.message)
r.destroy()
"

# always run reminder in background

env "${MYENV[@]}" "${PYEXE}" -c "${PYDEBUG}" "${@}" || exit 1

if [ -n "${JOB}" ]
then
	if [ -z "${HELP}" ]
	then
    	# put this script into the background
    	# run py in current script = job remains
		bash -c "kill -s SIGSTOP $$; kill -s SIGCONT $$&" &
		wait
	fi
	env "${MYENV[@]}" "${PYEXE}" -c "${PYSCRIPT}" "${@}"
else
	# run py in background, no job
	env "${MYENV[@]}" "${PYEXE}" -c "${PYSCRIPT}" "${@}" &
fi
