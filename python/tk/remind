#!/bin/bash
# NOTE: this just starts a process that waits until the given time to
# display a reminder.  The scheduled reminder will not persist on system
# reboot.

# TZ environment variable seems to affect
# python weirdly from cygwin
MYENV=()
if hash cygpath >/dev/null 2>&1
then
	MYENV+=(TZ=)
fi

for candidate in py python python3
do
	if hash "${candidate}" &>/dev/null
	then
		PYEXE="${candidate}"
		break
	fi
done
if [ -z "${PYEXE}" ]
then
	echo "Failed to find python." >&2
	exit 1
fi

HELP=
JOB=
for item in "${@}"
do
	case "${item}" in
		-h|--help)
			HELP=1
			JOB=1
			;;
		-j|--job)
			JOB=1
			;;
	esac
done

PARSER_SCRIPT="
p = argparse.ArgumentParser()
p.add_argument(
    'time', help=(
        'time for message, in YYYY-mm-dd HH:MM:SS format.'
        '  A partial time can be given, the other values will be set to 0.'
        '  In ambiguous cases, the time will be interpreted as:'
        ' MM, HH:MM'
    ))
p.add_argument('message', help='message to display', default='', nargs='?')
p.add_argument('-q', '--quiet', action='store_true')
p.add_argument('-v', '--verbose', action='store_true')
p.add_argument('-t', '--title', default='remind', help='message title')
p.add_argument('-d', '--delay', action='store_true', help='interpret time as a delay instead.')
p.add_argument(
    '-j', '--job', action='store_true',
    help=(
        'run as a job, otherwise run without job as background'
        ' Running as a job means backgrounding the remind script.'
        ' This makes it show up when using \"jobs\" at the commandline'
        ' which allows you to check if reminders are scheduled.'
        ' However, this also means that fg would put it in fg, and on'
        ' cygwin, it cannot be placed back into bg so if you'
        ' accidentally fg, you might need to cancel and re-schedule it.'
    )
)
"

DATE_PARSE="
def parse_time(spec):
    parts = re.split(r'(\d+(?:\.\d+)?)', spec.strip())
    it = iter(parts)
    pre = next(it)

    ymd = []
    hms = []
    try:
        for num, post in zip(it, it):
            if pre == '':
                if post == '' or post == ':':
                    out = hms
                else:
                    out = ymd
            out.append(float(num))
            if post == ' ':
                out = hms
            pre = post
    except NameError:
        raise ValueError('Bad time spec: {}'.format(repr(spec)))

    if ymd:
        if len(parts[1]) == 4:
            while len(ymd) < 3:
                ymd.append(0.0)
        else:
            ymd = ([0.0] * (3-len(ymd))) + ymd
        while len(hms) < 3:
            hms.append(0.0)
    else:
        assert hms
        ymd = [0.0]*3
        if len(hms) == 1:
            hms = [0.0, hms[0], 0.0]
        elif len(hms) == 2:
            hms.append(0.0)

    try:
        assert len(ymd) == 3
        assert len(hms) == 3
    except AssertionError:
        raise ValueError('Bad time spec {}'.format(repr(spec)))
    ymd.extend(hms)
    return ymd
"
GET_TDELTA="
import sys
import argparse
import datetime
import time
import re
import tkinter as tk
try:
    from tkinter import messagebox
except ImportError:
    import tkMessageBox as messagebox
import platform

${PARSER_SCRIPT}
try:
    args = p.parse_args()
except SystemExit:
    sys.exit(1)
if args.quiet:
    args.verbose = False
${DATE_PARSE}
times = parse_time(args.time)
now = datetime.datetime.now()
if args.verbose:
    print('now:', now, file=sys.stderr)
    print(times, file=sys.stderr)
if args.delay:
    if times[0] or times[1]:
        raise ValueError('Year/Month not supported for delay interpretation.')
    info = {k:v for k, v in zip(['days', 'hours', 'minutes', 'seconds'], times[2:])}
    tdelta = datetime.timedelta(**info)
    if args.verbose:
        print('delay:', file=sys.stderr)
        for k, v in info.items():
            print('  {}: {}'.format(k, v), file=sys.stderr)
else:
    replace = dict()
    microsecond = int((times[-1] - int(times[-1])) * 1000000)
    times = [int(_) for _ in times]
    times.append(microsecond)
    keys=['year', 'month', 'day', 'hour', 'minute', 'second', 'microsecond']
    adding = False
    for k, v in zip(keys, times):
        if v or adding:
            adding = True
            if v == 0 and (k == 'month' or k == 'day'):
                replace[k] = 1
            else:
                replace[k] = v
    if args.verbose:
        print(replace, file=sys.stderr)
    target = now.replace(**replace)
    if target < now and target.hour < 12:
        if args.verbose:
            print('Warning, negative duration, assuming pm.', file=sys.stderr)
        target = target.replace(hour=target.hour+12)
    tdelta = target - now
if not args.quiet:
    print('Reminding at:', now + tdelta, file=sys.stderr)
"

PYSCRIPT="
${GET_TDELTA}
now = time.time()
target = now + tdelta.total_seconds()
while now < target:
    time.sleep(target-now)
    now = time.time()

r = tk.Tk()
r.title('remind')
# using withdraw() would hide it from view. When working with
# something else, there would be no visual indication of the reminder
# except when alt+tab and see it in the list or no other windows open
# and would obscure it when it is created.

if platform.system() == 'Windows':
    r.attributes('-toolwindow', True, '-topmost', True)
else:
    try:
        r.attributes('-topmost', True)
    except Exception:
        traceback.print_exc()
# Make main window small and hide behind popup(assumed to be at screen
# center).
r.geometry('1x1')
r.update_idletasks()
r.geometry('+{}+{}'.format(
    (r.winfo_screenwidth() - r.winfo_width())//2,
    (r.winfo_screenheight() - r.winfo_height())//2
))

messagebox.showinfo(title=args.title, message=args.message)
r.destroy()
"

# always run reminder in background, but don't want errors or help message
# in background

env "${MYENV[@]}" "${PYEXE}" -c "${GET_TDELTA}" "${@}" || exit 1

if [ -n "${JOB}" ]
then
	if [ -z "${HELP}" ]
	then
    	# put this script into the background
    	# run py in current script = job remains
		bash -c "kill -s SIGSTOP $$; kill -s SIGCONT $$&" &
		wait
	fi
	env "${MYENV[@]}" "${PYEXE}" -c "${PYSCRIPT}" "${@}" -q
else
	# run py in background, no job
	env "${MYENV[@]}" "${PYEXE}" -c "${PYSCRIPT}" "${@}" -q &
fi
