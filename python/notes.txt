______________________________
contents:
=1= modules
=2= context manager

interpreter:
~/.inputrc



Tkinter
blah



------------------------------
=1= modules
------------------------------
modules contain __init__.py
imports can be relative
  from . import something
  from .. import something

note, for runtime imports, use __import__:
  __import__(name, globals={}, locals={}, fromlist=[], level=-1):
    globals: determine context (subpackages etc)
    locals: unused
    fromlist: list of names (emulate from name import ...)
              or empty list (import name)
              NOTE: should be list with empty name: ['']
                if want to import something like 'mod.rt'
    level: -1: both relative and absolute
            0: absolute
           >0: # of parent directories to search relative to cur mod


for running files inside a module (might use absolute imports)
use python -m module.submodule
ex:
workingdir = /home

/home
        /mymod
                /submodir
                    bar.py
                foo.py
want to run  mymod/foo.py

in foo.py:
    from mymod.submodir import bar

python mymod/foo.py => error, no module named mymod
    (because import dir for foo.py is then set to its dir)

instead run:
python -m mymod.foo

------------------------------
=2= context manager
------------------------------
used in with statement
should have __enter__() and __exit__(exceptionType, exceptionValue, traceback)

    __enter__():
        return an item to be bound by the with statement
        with manager as f:   ->    f = manager.__enter__()
    __exit__(exceptionType, exceptionValue, traceback):
        all None if no exception
        return a Truthy value to indicate exception was handled and should not be raised
