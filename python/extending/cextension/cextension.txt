python c extensions

-0- general
	-0.0- notation:
		-0.0.1- references
	-0.1- format strings
	-0.2- Abstractions
		-0.2.1- object
		-0.2.2- sequence
		-0.2.3- call
		-0.2.4- number
		-0.2.5- mapping
		-0.2.6- iterator
		-0.2.7- buffer
-1- python objects
	-1.0- Py_BuildValue
	-1.1- reference counting
	-1.2- working with objects
	-1.3- specific types
		-1.3.1- numbers
		-1.3.2- tuple
		-1.3.3- str
		-1.3.4- list
		-1.3.5- dict
		-1.3.6- buffers
-2- functions/methods
	-2.1- PyMethodDef
	-2.2- arguments
	-2.3- return values/exceptions
	-2.4- exceptions
-3- module api
	-3.0- instantiation
	-3.1- PyModuleDef
	-3.2- PyInit
	-3.3- Adding members.
-4- compilation/installation
-5- GIL
-6- C api (for other modules)
-7- installation
-8- types

_____________________________
-0- general
	#define PY_SSIZE_T_CLEAN
	#include <Python.h>
		the PY_SSIZE_T_CLEAN makes lengths use Py_ssize_t instead of int.

	NOTE: include Python.h as first thing (or almost first)
		since it can modify standard headers via macros etc

	Python is a C interface, so "bool" is actually int

	Generally, only decref at the very very very end as late as possible
	assign values before decrefing the original value etc.

	use things as soon as possible before removing/decref to avoid segfault
	/accessing freed memory
	______________________________
	-0.0- notation:
		______________________________
		-0.0.1- references
			nref: new reference PyObject*
			bref: borrowed reference PyObject*
			tref: takes reference PyObject* (function input)
		______________________________
		-0.0.2- bool
			bool: int, 0 or 1, 1 = success
			ibool: inverted bool, 0=success, 1 = error
			-ibool: -0 = 0 = success, -1 = error
			tbool: bool, but -1 for error



	______________________________
	-0.1- format strings
		Format strings generally have:
			[{(]code[:funcname][)}]
		() in the string indicates a tuple.
		funcname is used for error message

		The following is for PyArg_Parse*
		______________________________
		strings/buffers
			Returned pointers are managed by corresponding PyObject, don't
			allocate, don't free (except et/es)

			PyBuffer_Release(PyBuffer *view)
				When buffers get parsed, they get locked?, must release it:

			general principles:
				#: const char* + Py_ssize_t
				*: a Py_buffer

			code  nitems  python_type         c_type
			s     1       str                 null-terminated const char*
			s*    1       str/byteslike       Py_buffer
			s#    2       str/bytes, size     const char*, Py_ssize_t
			z     1       str/None            s or nullptr
			z*    1       z/byteslike         Py_buffer
			z#    2       z*, size            z*, Py_ssize_t
			y     1       bytes-like          null-terminated const char*
			y*    1       bytes-like          Py_buffer
			y#    2       y, size             y, Py_ssize_t
			S     1       bytes               PyBytesObject*
			Y     1       bytearray           PyByteArrayObject*
			u     1       str                 const Py_UNICODE*
			u#    2       str, size           const Py_UNICODE*, Py_ssize_t
			Z     1       str/None            const Py_UNICODE*
			Z#    2       Z, size             const Py_UNICODE*, Py_ssize_t
			U     1       str                 PyObject*
			W*    1       rw bytes-like       Py_buffer
			es    2       str                 const char *encoding, char **buffer
			et    2       str/bytes/bytearray same as es
			es#   3       str                 es, Py_ssize_t
			et#   3       str/bytes/bytearray et, Py_ssize_t

		NOTE: the es/et/es#/et# return allocated data buffer addresses.
		use PyMem_Free() on them when no longer needed
		______________________________
		numbers
			code  nitems  python_type         c_type
			b     1       int                 uchar, char?
			B     1       int                 uchar (no overflow??)
			h     1       int                 short
			H     1       int                 ushort
			i     1       int                 int
			I     1       int                 uint
			l     1       int                 long
			k     1       int                 ulong
			L     1       int                 long long
			K     1       int                 ulong long
			n     1       int                 Py_ssize_t
			c     1       bytes/bytearray     char    (should be length 1)
			C     1       str                 int     (should be length 1)
			f     1       float               float
			d     1       float               double
			D     1       complex             Py_complex
		______________________________
		objects
			O     1       object              PyObject *
			O!    2       object              typeobject, PyObject*
			O&    2       object              converter, void*
			                                  converter(object, address) ???
			p     1       bool                int
			(...) N       tuple               corresponding code C types.
			|             optional args       args to the right are optional
			$             keyword only        args are keyword only
			:             function name for error
			;             error message

		______________________________
		Py_BuildValue(const char *fmt, ...)
			same as above, except no * codes (no Py_buffer)
			strings: s, y, u
			numbers: same
			objects: N: no increment object

	______________________________
	-0.2- Abstractions

		______________________________
		-0.2.1- general
			Py_Is(PyObject*, PyObject*)
			Py_IsNone(PyObject*)
			Py_IsTrue(PyObject*)
			Py_IsFalse(PyObject*)

			Py_TYPE(PyObject*)
			Py_IS_TYPE(PyObject*, PyTypeObject*)

			int PyObject_HasAttr(PyObject*, PyObject *name)
			int PyObject_HasAttrString(PyObject*, const char *name)

			PyObject* PyObject_GetAttr(PyObject*, PyObject *name)
			PyObject* PyObject_GetAttrString(PyObject*, const char *name)
			PyObject* PyObject_GenericGetAttr(PyObject *, PyObject *name)
			PyObject* PyObject_Str(Pyobject*)
			PyObject* PyObject_Repr(Pyobject*)
			PyObject* PyObject_ASCII(Pyobject*)
		______________________________
		-0.2.2- sequences
			Py_ssize_t PySequence_Size(PyObject*)
			Py_ssize_t PySequence_Length(PyObject*)
				-1 if fail
			PyObject* PySequence_GetItem(PyObject *o, Py_ssize_t i)
				NULL if fail.



______________________________
-1- python objects
	Python objects are generally represented by a PyObject *ptr
	______________________________
	-1.0- Py_BuildValue
		This is a quick/easy way to build some python value.
		PyObject *thing = Py_BuildValue("format", arg1, arg2, ...);
			NOTE: strs/bytes etc get copied
	______________________________
	-1.1- reference counting
		Objects are reference counted.
		Module attrs should give an extra reference count.
			Otherwise, if you do something like del module.attr,
			Now it is lost and any function that uses it may segfault
			or something.
		functions that return objects generally give a reference
		increfed. REMEMBER TO DECREF THEM ONCE NO LONGER IN USE.
		Py_XDECREF(PyObject*)
		Py_XINCREF(PyObject*)
		Py_DECREF(PyObject*)
		Py_INCREF(PyObject*)
			These change refcount.  The X versions checks for NULL.

		Some functions "borrow" a reference.  In this case, the object
		is assumed to last for the lifetime of the call.  If it needs
		to be saved or something, explicitly call Py_[X]INCREF.
		NOTE: whenever objects could possibly be freed, items can be
		invalidated by some callback or destructor.  It is generally
		safe to Py_[X]INCREF to ensure something remains in scope if
		calling any python methods and then Py_[X]DECREF aftewards.

		All object creation functions return a new reference.
		(PyLong_FromLong(), Py_BuildValue(), ...)

		PyObject_CallObject(PyObject *thing, PyObject *args)
			args should be a tuple or NULL (no args)

		When calling functions, most calls will borrow reference.
		Some will take reference though

	______________________________
	-1.2- working with objects
		attrs
			nref PyObject_GetAttr(PyObject *obj, PyObject *attr);
			nref PyObject_GetAttrString(PyObject *obj, const char *attr);
			bool PyObject_HasAttr(PyObject *obj, PyObject *attr);
			bool PyObject_HasAttrString(PyObject *obj, const char *attr);
			-ibool PyObject_SetAttr(PyObject *self, PyObject *name, PyObject *val);
			-ibool PyObject_SetAttrString(PyObject *self, const char *name, PyObject *val);
			-bool PyObject_DelAttr(PyObject *self, PyObject *name);
			-bool PyObject_DelAttrString(PyObject *self, const char *name);

		types:
			tbool PyObject_IsSubclass(PyObject *obj, PyObject *cls)


		______________________________
		Calling objects
			PyObject_Call(PyObject *obj, PyObject *args, PyObject *kwargs);
			PyObject_CallObject(PyObject *obj, PyObject *args);
			PyObject_CallFunction(PyObject *obj, const char *fmt, ...);
			PyObject_CallFunctionObjArgs(PyObject *obj, PyObject *arg1, PyObject *arg2, ...);
			PyObject_CallMethod(PyObject *obj, const char *name, const char *fmt, ...);
	______________________________
	-1.3- specific types
		______________________________
		-1.3.1- numbers
		______________________________
		-1.3.2- tuple
			bref PyTuple_GetItem()
			PyTuple_SetItem(PyObject *self, tref item)
		______________________________
		-1.3.3- str
		______________________________
		-1.3.4- list
			bref PyList_GetItem()
			PyList_SetItem(PyObject *self, tref item)
		______________________________
		-1.3.5- dict
			bref PyDict_GetItem():
			bref PyDict_GetItemString():
		______________________________
		-1.3.6- buffers
			Get buffer by:
				PyArg_Parse*
				PyObject_GetBuffer()
			Py_buffers represent views and should be released
			struct Py_buffer
			{
				void *buf;
				PyObject *obj;
				Py_ssize_t len;
				int readonly;
				Py_ssize_t itemsize;
				const char *format;
				int ndim;
				Py_ssize_t *shape;
				Py_ssize_t *strides;
				Py_ssize_t *suboffsets;
				void *internal;
			};
			strides is in bytes
			suboffsets:
				If any >= 0, then
				values along that dimension are pointers.
				and each val is byte offset from th epointers.
				<0 indicates no dereferencing
				NULL indicates all <0

				ie: after applying strides, if suboffsets >= 0:
					newptr = *((char**)ptr) + suboffsets[i]
			format:
				if NULL, "B" is assumed

______________________________
-2- functions/methods
	______________________________
	-2.1- PyMethodDef
		PyMethodDef is a struct that describes a python method/function.
		An array of PyMethodDef is used to enumerate the methods of a module
		(or class?? needs verification)

		Initialization of PyMethodDef:
			{python_name, ptr2func, METH_VARARGS|METH_KEYWORDS, "helpstr"}

		flags:
			METH_VARARGS                      positional only
			METH_VARARGS|METH_KEYWORDS        position + keyword
			METH_FASTCALL                     3.7+
			METH_FASTCALL|METH_KEYWORDS       3.7+
			METH_NOARGS                       no arguments (use Py_UNUSED for second arg)
			METH_O                            1 argument, already parsetupled

			METH_CLASS                        a class method (self = type)
			METH_STATIC                       a static method (self = NULL)



		Arrays of PyMethodDef should end with
			{NULL, NULL, 0, NULL}
	______________________________
	-2.2- handling arguments
		see also -0.1- format strings
		Arguments are generally obj (module or class or instance, etc)
		and then either 1 or 2: (tuple) or (tuple, dict)
		depending on whether keyword arguments are supported.
		ie:
			function(PyObject *self, PyObject *args);
			function(PyObject *self, PyObject *args, PyObject *kwargs);

		Argument parsing has a few functions:
			PyArg_ParseTuple()
			PyArg_ParseTupleAndKeywords()
			PyArg_Parse()

		These generally take a format string and a list of destinations
		to store the values.  Format strings are sequential strings
		that indicate iterated values.
		Example:
			function(PyObject *self, PyObject *args)
			{
				int i;
				const char *str;
				std::size_t size;
				PyArg_ParseTuple(args, "is#", &i, &str, &size);
			}
		NOTE: PyArg_ParseTupleAndKeywords() cannot handle nested tuples.

		Parse functions return truthy int for success.
		PyArg_ParseTuple(PyObject *args, const char *fmt, ...);
		PyArg_VaParse(PyObject *args, const char *fmt, va_list vargs);
		PyArg_ParseTupleAndKeywords(
			PyObject *args, PyObject *kw,
			const char *format, const char *keywords[], ...)
		PyArg_VaParseTupleAndKeywords(
			PyObject *args, PyObject *kw,
			const char *format, const char *keywords[],va_list vargs);
		PyArg_UnpackTuple(
			PyObject *args, const char *name,
			Py_ssize_t min, Py_ssize_t max, PyObject*...)



	______________________________
	-2.3- returns
		Generally, functions should return PyObject*.
		A return of NULL indicates an error.
		Returned values should have a reference.

		------------------------------
		Returning None
			None is a common return value and has dedicated macro:
				Py_RETURN_NONE
			which stands for:
				Py_INCREF(Py_None);
				return Py_None;

	______________________________
	-2.4- exceptions
		Returning NULL indicates an error.
		Unless you are the source of the exception, do not call any
		exception functions.  (Just return NULL to propagate the error.)

		Builtin exception classes are named PyExc_<NameOfError>
		like PyExc_TypeError.

		3 thread-local vars:
			exception type, object, and traceback

		To raise an exception call one of: (do not change refs to type)
			PyErr_SetString(PyObject *type, const char *message)
				take object and cstring
			PyErr_SetFromErrno(PyObject *type)
				take exc object, check errno
			PyErr_SetObject()
				take exc and value
			PyErr_Occurred()
				NULL if no exc else the obj
			PyErr_Clear()
				ignore error
			PyErr_NoMemory()
				failed malloc/calloc etc
			PyErr_NewException('full.name', NULL, NULL);
				A new exception type.

		Builtin Exceptions:


		custom exceptions:
			Have some kind of static PyObject* to hold the exception class.
			PyObject *new_exception_class = PyErr_NewException("mod.name", NULL, NULL);
			Py_XINCREF(MyError);
			adding it to a module:
				PyModule_AddObject(module, "pyname", new_exception_class)
				if (PyModule_AddObject(m, "error", MyError) < 0)
				{
					Py_XDECREF(MyError);
					Py_CLEAR(MyError);
					Py_DECREF(m);
					return NULL;
				}
			return m;
			}

______________________________
-3- module api
	Modules are shared library objects with a (extern "C") init func.
	The name of the module must match the import name and the
	corresponding init func.  Suffixes are allowed.
	______________________________
	-3.0- instantiation
		The module init func should have the following signature:
		PyMODINIT_FUNC PyInit_modulename()
		{ ... }

		The module is instantiated via PyModule_Create
		PyModule_Create(&my_PyModuleDef_object);

	______________________________
	-3.1- PyModuleDef
		Modules are defined by a PyModuleDef struct.  These should
		generally be static and are referenced directly.
		(If non-static likely will cause segfault)

		example:
			static struct PyModuleDef mydef = {
				PyModuleDef_HEAD_INIT,
				"python module name",
				"docstring or NULL",
				-1 (size of per-interpreter state or -1),
				PyMethodDef*
			};
	______________________________
	-3.2- PyInit

	______________________________
	-3.3- Adding members.
		int PyModule_AddObjectRef(moduleptr, "name", (PyObject*) thing)
			< 0 if error

______________________________
-4- compilation/installation
	Modules can be compiled with gcc or via setuptools.Extension in setup.py
	The only requirements are:
		PyMODINIT_FUNC PyInit_<modulename>()
		{
		}
	must be externc
	the name of the shared lib must begin with the module name
	(mymodule.so instead of libmymodule.so (which is default for cmake outputs)
	for installation: see python packaging notes, -9- extensions.


______________________________
-5- GIL
	Py_BEGIN_ALLOW_THREADS

______________________________
-6- C api (for other modules)
	The interface should be static.  Python handles this with capsules.
	Using this mechanism means you don't need to worry about declspec etc.
	When compiling, the interface should be placed into the module
	as capsules.  When other extension modules want to use your C
	interface, they will "import" your interface PyCapsule_Import()
	so that they can use it
	ie:
		library:
			static void* interface[N];
		PyInit_module():
			interface[i] = (void*)functions
			capsule = PyCapsule_New((void*)interface, "module.attrname", NULL);
			PyModule_AddObject(module, "attrname", capsule)
		clients:
			void** interface =  PyCapsule_Import("module.attrname", 0);
			#define method (*(returntype *(args))interface[N])


------------------------------
-8- types
------------------------------
	Things to keep in mind:
		Types are objects too.  Generally they will all be instances of struct PyTypeObject.
		The actual instances will need to have a struct too.

	Type objects will be instances of PyTypeObject.
	Actual instances should have this structure:
	struct MyInstanceStruct {
		PyObject_HEAD
		PyVarObject_HEAD    //use var version if variable size otherwise use non-var version (be sure no ;)
		...

	};

	Types can be static or heap.
	Heap types should be created via:
		PyType_FromSpec()
		PyType_FromSpecWithBases()
		PyType_FromModuleAndSpec()
		PyType_FromMetaclass()

	------------------------------
	-8.1- Relevant types
	------------------------------
	PyObject:
		equivalent to:
		struct PyObject {
			void *obj;
			Py_ssize_t refcount;
		};

		The most basic python object pointer.
		PyObject is for objects with constant runtime size
		add macro PyObject_HEAD to the front of relevant classes.

	PyVarObject:
		equivalent to:
		struct PyVarObject: PyObject {
			Py_ssize_t ob_size;
		};

		PyVarObject is for objects with varying runtime size.
		add macro PyVarObject_HEAD to the front of relevant classes.
		ob_size is used for dynamic types.

	PyBaseObject_Type
		The C equivalent of python object type.

	PyTypeObject
		This is a struct whose instances represent a type.  Its
		members are refered to as "slots".

	------------------------------
	-8.2- slots
	------------------------------
	The documentation is not clear on what exactly a "slot" is...
	But from reading, it seems like it means data member of the
	type instance.  "PyObject slot" seems to mean that the variable is
	held by the PyObject struct of the PyTypeObject struct.

	NOTE: not all slots need to be set.  Generally they will default to null.
	However, when calling PyType_Ready, some "inheritance" will be performed by
	reading avlues from tp_base (at least a PyBaseObject_Type).

		------------------------------
		-8.2.1- PyObject slots
		------------------------------
		Py_ssize_t ob_refcnt
			This is the refcount of the type instance.  This is changed by decref/incref.
			Instances should refer to their type so this is at least the number of
			existing instances.
			PyObject_HEAD_INIT sets it to 1

		PyTypeObject *PyObject.ob_type
			Type objects generally are PyType_Type instances so this will
			usually be &PyType_Type
			INHERITED from tp_base if null.

		PyObject *_ob_next
		PyObject *_ob_prev
			#ifdef Py_TRACE_REF
			used for doubly-linked list of all dynamic (runtime) objects
			mostly for debugging.
		------------------------------
		-8.2.2- PyVarObject slots
		------------------------------
		Py_ssize_t ob_size
			0 for statically allocated type objects.
			Otherwise "special meaning" for dynamically allocated type objects.

			Py_SIZE()
			Py_SET_SIZE()

		------------------------------
		-8.2.3- PyTypeObject slots
		------------------------------
		const char *tp_name
			UTF-8 C string name of the class.
			For dynamically allocated type objects, this should just be the name.
			The module/package etc part should be in __module__.
			NOTE: __module__ is required to allow pickling.
			For statically allocated type objects, it should be the entire fully-qualified
			name including package, module, etc.
			`__module__, __name__ = tp_name.rsplit('.', 1)`

		Py_ssize_t tp_basicsize
		Py_ssize_t tp_itemsize
			tp_itemsize is actually a bool and indicates whether instances
			have a fixed size or not.  tp_basicsize is the size if not tp_itemsize.
			???  Otherwise, instances must have ob_size.
			     Instance size is tp_basicsize + N*tp_itemsize where N is
			     the "length" of object.
			tp_basicsize should include any required by tp_base
			basically, `tp_basicsize = sizeof(C struct that represents instances)`.
			tp_basicsize must be a multiple of _Alignof(PyObject).
			INHERITED if 0 (independently)

		void tp_dealloc(Pyobject*)
			Pointer to function to destruct instances.
			Called when decrefed to 0 refcount.
			Remember to free any owned references.
			free any resources.
			call tp_free (if no Py_TPFLAGS_BASETYPE, then can call object deallocator directly)
			call PyObject_GC_UnTrack() if support gc (Py_TPFLAGS_HAVE_GC)
			if Py_TPFLAGS_HEAPTYPE (dynamic type? type is heap allocated?), Py_DECREF() the type object.
			examples:
				static void foo_dealloc(foo_object *self) {
					PyObject_GC_UnTrack(self);
					Py_CLEAR(self->ref);
					Py_TYPE(self)->tp_free((PyObject*)self);
				}
				static void foo_dealloc(foo_object *self) {
					PyTypeObject *tp = Py_TYPE(self);
					// free self
					tp->tp_free(self);
					Py_DECREF(tp);
				}
			INHERITED if nullptr

		Py_ssize_t tp_vectorcall_offset
			optional offset of ?per-instance function? for vectorcall protocol.
			Only used if Py_TPFLAGS_HAVE_VECTORCALL, in which case it must be > 0.

			Py_TPFLAGS_HAVE_VECTORCALL and vectorcallfunc are both required for
			vectorcall.  If missing one, then will fallback to tp_call.

			tp_call should always be set if vectorcall to allow for fallback.

			INHERITED always. (But Py_TPFLAGS_HAVE_VECTORCALL is not so would need to set it separately)


		PyObject* tp_getattr(PyObject *self, char *attr)
			DEPRECATED
			char* version of tp_getattro
			INHERITED if tp_getattr and tp_getattro both NULL

		int tp_setattr(PyObject *self, char *attr, PyObject *value)
			DEPRECATED
			char* version of tp_setattro
			INHERITED if tp_setattr and tp_setattro both NULL

		PyAsyncMethods* tp_as_async
			Pointer to PyAsyncMethods struct.
			NOT INHERITED ??BUT?? contained fields inherited individually

		PyObject* tp_repr(PyObject*)
			Return a PyObject* str.
			Should be a str so that eval(s) restores the obj.
			Otherwise should be "<str containing type and value>"
			INHERITED
			defaults to "<TYPENAME object at ADDRESS>"

		PyNumberMethods *tp_as_number
			Pointer to struct containing number methods.
			NOT INHERITED ??BUT?? contained fields inherited individually

		PySequenceMethods* tp_as_sequence
			Pointer to struct with sequence methods.
			NOT INHERITED ??BUT?? contained fields inherited individually

		PyMappingMethods *tp_as_mapping
			Pointer to struct with mapping methods.
			NOT INHERITED ??BUT?? contained fields inherited individually

		Py_hash_t tp_hash(Pyobject*)
			Function returning a Py_hash_t 
			-1 indicates error.
			NOTE: tp_richcompare is also required to be hashable.
			INHERITED if both tp_hash and tp_richcompare must be NULL

		PyObject* tp_call(PyObject *self, PyObject *args, PyObject *kwargs)
			used for call protocol
			INHERITED

		PyObject* tp_str(PyObject*)
			Same as repr but for str.
			DEFAULTS to PyObject_Repr

		PyObject* tp_getattro(PyObject *obj, PyObject *attr)
			getattr
			INHERITED if both tp_getattr and tp_getattro are NULL
			NOTE:
				PyBaseObject_Type uses PyObject_GenericGetAttr()

		PyObject* tp_getattro(PyObject *obj, PyObject *attr, PyObject *val)
			setattr
			INHERITED if both tp_setattr and tp_setattro are NULL
			NOTE:
				PyBaseObject_Type uses PyObject_GenericSetAttr()

		PyBufferProcs *tp_as_buffer
			Struct of methods for buffer protocol.
			NOT INHERITED ??BUT?? contained fields inherited individually

		unsigned long tp_flags
			Indicate that some (new) fields ("extension structures") are valid (defaults to 0 so backward compatible)
			Most bits "inherited individually".
			"Extension structures" only inherited if the bits are inherited.

			Py_TPFLAGS_HAVE_GC together with tp_traverse and tp_clear

			DEFAULT: Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE

			Py_TPFLAGS_HEAPTYPE
				If dynamic type. Should support garbage collection (mod.class, but class.module so ref cycled)
				gets incref/decrefed as instances are created/destroyed

			Py_TPFLAGS_BASETYPE
				allow use as base class.

			Py_TPFLAGS_READY
				finished initialization by PyType_Ready()
			Py_TPFLAGS_READYING
				mid-initialization by PyType_Ready()

			Py_TPFLAGS_HAVE_GC
				instances must be managed via Pyobject_GC_New()/PyObject_GC_Del()
				Should also set: tp_traverse, tp_clear

			Py_TPFLAGS_DEFAULT
				default values
				Currently:
					Py_TPFLAGS_HAVE_STACKLESS_EXTENSION

			Py_TPFLAGS_METHOD_DESCRIPTOR
				Unbound method (3.8).
				Allows avoiding a temporary bound method.
				meth.__get__(obj, cls)(*args, *kwargs) == meth(obj, *args, *kwargs)
				meth.__get__(None, cls)(*args, *kwargs) == meth(*args, *kwargs)
				INHERITED if Py_TPFLAGS_IMMUTABLETYPE and tp_descr_get

			Py_TPFLAGS_MANAGED_DICT
				have a `~object.__dict__` attribute managed by VM
				must set Py_TPFLAGS_HAVE_GC
				3.12
				INHERITED if not parent.tp_dictoffset

			Py_TPFLAGS_MANAGED_WEAKREF
				Allow weak reference
				3.12
				INHERITED if not parent.tp_weaklistoffset

			Py_TPFLAGS_ITEMS_AT_END
				Instances must be a PyVarObject
				3.12
				INHERITED

			Py_TPFLAGS_LONG_SUBCLASS
			Py_TPFLAGS_LIST_SUBCLASS
			Py_TPFLAGS_TUPLE_SUBCLASS
			Py_TPFLAGS_BYTES_SUBCLASS
			Py_TPFLAGS_UNICODE_SUBCLASS
			Py_TPFLAGS_DICT_SUBCLASS
			Py_TPFLAGS_BASE_EXC_SUBCLASS
			Py_TPFLAGS_TYPE_SUBCLASS
				used for Py<type>_Check() for quick check that inherited
				from basic types. faster than PyType()...and traverse to tp_base

			Py_TPFLAGS_HAVE_FINALIZE
				deprecated
				tp_finalize is valid

			Py_TPFLAGS_HAVE_VECTORCALL
				INHERITED if tp_call is inherited.

			Py_TPFLAGS_IMMUTABLETYPE
				If the Type itself is immutable.
				NOT INHERITED
				3.10

			Py_TPFLAGS_DISALLOW_INSTANTIATION
				tp_new = NULL, no __new__ (ex. abstract class)
				NOT INHERITED
				3.10

			Py_TPFLAGS_MAPPING
				match mapping patterns with match statement (3.10)
				NOTE: mutually exclusive with Py_TPFLAGS_SEQUENCE
				3.10

			Py_TPFLAGS_SEQUENCE
				match sequence patterns with match statement (3.10)
				NOTE: mutually exclusive with Py_TPFLAGS_MAPPING
				3.10

			Py_TPFLAGS_VALID_VERSION_TAG
				internal, ignore this.
				"like" a dirtybit for the type? use PyType_Modified()

		const char *tp_doc
			docstring
			NOT INHERITED

		int tp_traverse(PyObject *self, visitproc visit, void *arg)
			to support gc. used to detect ref cycles.
			usually just calls Py_VISIT() on each owned reference that
			might be in a ref cycle.
			don't forget Py_TYPE if heap allocated type
			INHERITED if Py_TPFLAGS_HAVE_GC and tp_clear are inherited

		int tp_clear(Pyobject*)
			should decref owned references and set them to NULL
			(NOTE: set to NULL and then decref because otherwise might loop)
			ex: decref member -> gc traverse->free self->but not NULL yet so repeat forever
			INHERITED if Py_TPFLAGS_HAVE_GC and tp_traverse are inherited

		PyObject* tp_richcompare(PyObject *self, PyObject *other, int op)
			Return Py_True or Py_False, or Py_NotImplemented, or NULL if error(and set exception)
			op: Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
			Py_RETURN_RICHCOMPARE(A, B, op) macro can help
			INHERITED if tp_hash is inherited

		Py_ssize_t tp_weaklistoffset
			Py_TPFLAGS_MANAGED_WEAKREF is preferred.
			offset in INSTANCE to "weak reference list head" for the instance
			(is NOT tp_weaklist, which is weak refs to the TYPE)
			DEFAULT: <0 if Py_TPFLAGS_MANAGED_WEAKREF

		PyObject *tp_iter(PyObject*)
			Get an iterator
			INHERITED

		PyObject* tp_iternext(Pyobject*)
			advance an iterator (self is an iterator)
			NULL on end
			INHERITED

		PyMethodDef *tp_methods
			methods of the class.
			NOT INHERITED DIRECTLY (only through attr lookup)

		PyMemberDef *tp_members
			members of class
				NOT INHERITED (only through attr lookup)

		PyGetSetDef *tp_getset
			Descriptor members
			NOT INHERITED (only through attr lookup)

		PyTypeObject *tp_base
			The base class
			DEFAULT (by PyType_Ready()) PyBaseObject_Type.

		Pyobject *tp_dict
			the __dict__ for the type.  It is created by PyType_Ready().
			Initialize it to NULL
			Otherwise, stored in PyInterpreterState.
			PyType_GetDict() to get access.
			NOTE: NOT SAFE TO MODIFY THIS DICT

		PyObject* tp_descr_get(Pyobject *self, Pyobject *obj, Pyobject *type)
			the __get__() method for descriptors.
			INHERITED
		int tp_descr_set(Pyobject *self, Pyobject *obj, PyObject *value)
			setter/deleter for property
			INHERITED

		Py_ssize_t tp_dictoffset
			Prefer Py_TPFLAGS_MANAGED_DICT.
			NULL or -1 if Py_TPFLAGS_MANAGED_DICT, similar to the weakref

		int tp_init(Pyobject *self, PyObject *args, PyObject *kwargs)
			`__init__()`
			0 = success, -1 = error (also set exc)
			INHERITED

		Pyobject* tp_alloc(PyTypeObject *tp, Py_ssize_t nitems)
			INHERITED if static, else PyType_GenericAlloc()
			(PyBaseObject_Type uses PyType_GenericAlloc()

		PyObject* tp_new(PyTypeObject *subtype, PyObject *args, Pyobject *kwargs)
			call subtype->tp_alloc(subtype, nitems) and then minimal initialization
			(only stuff that can't be done by tp_init (ex. immutable stuff))

			INHERITED except if static and no tp_base or tp_base is object

		void tp_free(void *self)
			free the stuff
			INHERITED if static
			If dynamic, forced based on Py_TPFLAGS_HAVE_GC

		int tp_is_gc(PyObject*)
			Is the instance gc collectible? (ie. were all instances created
			using PyObject_GC_New?)
			INHERITED

		PyObject *tp_bases
			Tuple of base types. generally, don't do this for static types
			NOT INHERITED

		PyObject *tp_mro
			tuple of expanded base types.  Calculated by PyType_Ready()

		PyObject *tp_cache
			ignore this

		void *tp_subclasses
			ignore this

		PyObject *tp_weaklist
			weak reference list to this type object

		void tp_del(Pyobject *self)
			deprecated

		unsigned int tp_version_tag
			ignore this

		void tp_finalize(Pyobject *self)
			__del__
			do not mutate exception status:
			```
			{
				PyObject *tp, *exc, *tb;
				PyErr_Fetch(&tp, &exc, &tb);
				//do stuff
				PyErr_Restore(&tp, &exc, &tb);
			}
			```
			3.4
			INHERITED

		PyObject* tp_vectorcall(Pyobject *self, PyObject * const *args, size_t nargsf, Pyobject *kwargs)
			replace __new__ and __init__ for the type using
			vectorcall protocol.

		insigned char tp_watched
			ignore


	------------------------------
	-8.3- Protocol structs
	------------------------------
	Protocol structs have member function pointers that allow
	use of instances as protocol objects.  Usually the Py(Proto)_Func(args...)
	methods would probably just get the type, and then get the proto methods
	then call them.
		------------------------------
		-8.3.1- PyNumberMethods
		------------------------------
		nb_add                  nb_int
		nb_subtract             nb_reserved
		nb_multiply             nb_float
		nb_remainder            nb_inplace_add
		nb_divmod               nb_inplace_subtract
		nb_power                nb_inplace_multiply
		nb_negative             nb_inplace_remainder
		nb_positive             nb_inplace_power
		nb_absolute             nb_inplace_lshift
		nb_bool                 nb_inplace_rshift
		nb_invert               nb_inplace_and
		nb_lshift               nb_inplace_xor
		nb_rshift               nb_inplace_or
		nb_and                  nb_floor_divide
		nb_xor                  nb_true_divide
		nb_or                   nb_inplace_floor_divide
		                        nb_inplace_true_divide
		                        nb_index
		                        nb_matrix_multiply
		                        nb_inplace_matrix_multiply
		------------------------------
		-8.3.2- PyMappingMethods
		------------------------------
		mp_length
		mp_subscript
		mp_ass_subscript

		------------------------------
		-8.3.2- PySequenceMethods
		------------------------------
		sq_length
		sq_concat
		sq_repeat
		sq_item
		sq_ass_item
		sq_contains
		sq_inplace_concat
		sq_inplace_repeat

		------------------------------
		-8.3.3- PyBufferProcs
		------------------------------
		bf_getbuffer
		bf_releasebuffer

		------------------------------
		-8.3.4- PyAsyncMethods
		------------------------------



	______________________________
	-8.1- PyTypeObject struct:
		ex:
			struct PyTypeObject {
				.ob_base = PyVarObject_HEAD_INIT(NULL, 0)
				.tp_name = "module.Typename",
				.tp_doc = PyDoc_STR("docstr"),
				.tp_basicsize = sizeof(MyType),
				.tp_itemsize = 0,
				.tp_flags = PyTPFLAGS_DEFAULT,
				.tp_new = PyType_GenericNew,
			};
		NOTE: python recommends using the C99-style designated initializers
		      format to initialize the PyTypeObject struct.  This allows
		      only specifying what you need.
		fields:
			ob_base: must exist and be PyVarObject_HEAD_INIT(NULL, 0)
			         dunno if the NULL, 0 part is required though...
			tp_name: should be modulename.typename, must be like this
			         for pickle/pydoc compatibility
			tp_basicsize: Size of each object. (fixed)
			              NOTE: should be larger than base class to allow python
			              multiple inheritance
			tp_itemsize: variable-size objects, 0 otherwise.
			tp_flags: flags to indicate enabled members
			          PyTPFLAGS_DEFAULT
			          PyTPFLAGS_BASETYPE: can be used as base class
			                              (requires no assumption on actual type passed in...???)
			tp_doc: docstr
			tp_dealloc: deallocator for the struct type
			            cast to (destructor)
			tp_alloc: allocate struct type
			tp_free: free data
			         Py_TYPE(objptr)->tp_free(PyObject*)
			tp_init: __init__ initialize the obj
			         cast to (initproc), should take args and kwargs
			tp_new: __new__ allocate/create the obj
			        Always take args and kwargs
			        NOTE: if allow inheritance etc, call base __new__
			        should be statically called or type->tp_base->tp_new
			        (But... isn't second not statically called? what
			        is going on here? description seems a bit weird...)
			tp_members: c-array of PyMemberDef
			            Note these might be deleted (del something.attr)
			            resulting in them becoming NULL
			tp_getset: array of PyGetSetDef array
			           getter/setter functions for custom attr processing.
			           {"name", (getter) getfunc, (setter) setfunc, "docstr", data}
			           data = user data/custom data, passed to getter and setter.
			           getter/setter should be:
			           static PyObject *func(structobj*, void *userdata)
			tp_methods: c-array of PyMethodDef

	______________________________
	-8.2- type members
		PyMemberDef[] = {
			{"name", Py_T_OBJECT_EX, offsetof(struct, member), 0, "description")}
		}
		PyMemberDef
		{name, type, offset, flags, doc}
			type:
				T_SHORT                                         T_BYTE
				T_INT                                           T_UBYTE
				T_LONG                                          T_UINT
				T_FLOAT                                         T_USHORT
				T_DOUBLE                                        T_ULONG
				T_STRING                                        T_BOOL
				T_OBJECT      (None if not exist)               T_LONGLONG
				T_OBJECT_EX   (AttributeError if not exist)     T_ULONGLONG
				T_CHAR                                          T_PYSSIZET

	______________________________
	-8.3- type methods
		Methods take a self pointer of the representative struct and
		usually args
		PyMethodDef

	------------------------------
	-8.4- creating the type
		Preparing/creating the type:
			PyType_Ready(PyTypeObject*)
				fills in various members to default values.

		example module:
			static PyModuleDef custommodule = {
				.m_base = PyModuleDef_HEAD_INIT,
				.m_name = "custom",
				.m_doc = "Example module that creates an extension type.",
				.m_size = -1,
			};

			PyMODINIT_FUNC
			PyInit_custom(void)
			{
				PyObject *m;
				if (PyType_Ready(&CustomType) < 0)
					return NULL;

				m = PyModule_Create(&custommodule);
				if (m == NULL)
					return NULL;

				if (PyModule_AddObjectRef(m, "Custom", (PyObject *) &CustomType) < 0) {
					Py_DECREF(m);
					return NULL;
				}

				return m;
			}


