-1- ctypes
	-1.1- guide
		-1.1.1- loading libraries
		-1.1.2- accessing functions
		-1.1.3- calling functions
		-1.1.4- datatypes
		-1.1.5- arg/ret types
		-1.1.6- pointers or references
		-1.1.7- structs/unions
		-1.1.8- arrays
		-1.1.9- pointers
		-1.1.10- conversion
		-1.1.11- forward declarations
		-1.1.12- callables/function pointers
		-1.1.13- library variables
		-1.1.14- surprises
		-1.1.15- variable size data structures
	-1.2- reference
		-1.2.1- finding shared libraries
		-1.2.2- foreign functions
		-1.2.3- prototypes
		-1.2.4- utility functions
		-1.2.5- data types

#------------------------------
-1- ctypes
#------------------------------
foreign-language libraries (.dll, .so, etc)
compile c using gcc -o [name].so -shared -fpic [files, libs, dirs, etc]
note: -l might expect something of form lib[namehere].[dll, a, so, etc]
      use -l:actualfilename


______________________________
-1.1.1- loading libraries
	library classes:
		[all]   [windows only...???]
		cdll,   windll, oledll
	cdll: cdecl convention
	windll, oledll: stdcall convention
	ex:
		import ctypes
		ctypes.windll.kernel32
		ctypes.cdll.msvcrt
	windows adds .dll automatically??
	linux requires the extension too:
		use loadlibrary() or constructor
	ex2:
		cdll.loadlibrary("full-path-to-library-file")
		cdll("full-path-to-library-file")

______________________________
-1.1.2- accessing functions
functions are attributes
win32: use ansi and unicode versions of functions (end in a or w)
       (usually macro auto-picks, but with this module, must choose one yourself)
use getattr(lib, 'funcname') for function names that are messy
functions by ordinals:
lib[i]

______________________________
-1.1.3- calling functions
just call
ctypes tries protect against bad calls (need to look at headers or documentation)

none, ints, longs, bytestrings, unicode strings can be passed directly as params

none->null
bytestring, unicode->char* or wchar_t*
ints, longs-> int
ex:
	printf = libc.printf
	printf("hello, %s, %d, %f\n", "world!", 5, 4.2)
notes:
	example raises an error because only auto-conversions are
	bytestring, int, and none
	must use ctypes.c_float(4.2) instead of just 4.2


______________________________
-1.1.4- datatypes
ctypes type     c type                  python type
c_bool          _bool                   truthy object
c_char          char                    1-char string
c_wchar         wchar_t                 1-char unicode string
c_byte          char                    int/long
c_ubyte         unsigned char           int/long
c_short         short                   int/long
c_ushort        unsigned short          int/long
c_int           int                     int/long
c_uint          unsigned int            int/long
c_long          long                    int/long
c_ulong         unsigned long           int/long
c_longlong      __int64 or long long    int/long
c_ulonglong     unsigned __int64 or     int/long
                unsigned long long
c_float         float                   float
c_double        double                  float
c_longdouble    long double             float
c_char_p        char* (null termed)     string or none
c_wchar_p       wchar_t* (null termed)  unicode or none
c_void_p        void*                   int/long or none

types: created with optional initialier
       mutable (var.value)
	note1:
		new value to memory pointer type changes pointer
	note2:
		python strings are immutable
		need mutable strings, use ctypes.create_string_buffer()
		                          ctypes.create_unicode_buffer()
		ex:
			p = create_string_buffer(3)
			print sizeof(p), repr(p.raw)
			p = create_string_buffer("hello")
			print sizeof(p), repr(p.raw)
			print repr(p.value)
			p = create_string_buffer("hello", 10)
			print sizeof(p), repr(p.raw)
			print repr(p.value)
			p.value = "hi"
			print sizeof(p), repr(p.raw)
			print repr(p.value)


note:
	printf prints to std (not sys.std)

custom types require:
	_as_parameter_ (value to represent your object)
		or
	_as_parameter_ = property([fget, fset, fdel, doc])

______________________________
-1.1.5- arg/ret types
lib.function.argtypes
lib.function.restype

tries to protect against invalid types and attemps auto-conversion
classes must have from_param() to be used in argtypes sequence
	from_param: receives object, should typecheck
	            returns any valid object (ctypes, int, str, none, or _as_parameter_ object)

all return-types assumed to be ints
ex:
	strchr = ctypes.cdll.libc.strchr
	strchr("abcdef", ord("d"))
	strchr.restype = c_char_p
	strchr("abcdef", ord("d"))
	strchr.argtypes = [ctypes.c_char_p, ctypes.c_char]
	strchr("abcdef", "d")

restype can also be a callable function (will be called with returned integer)

______________________________
-1.1.6- pointers or references
ctypes.byref()
ctypes.pointer()

pointer: constructs a pointer (more work)
byref  : idk... but doc says does less work


______________________________
-1.1.7- structs/unions
must be structure and union classes
subclass must have _fields_ attr
_fields_: 2-tuple list of attrname, attrtype
	attrtype: a ctypes type, or structure, union, array, pointer
ex:
	class point(ctypes.structure):
	    _fields_ = [("x", ctypes.c_int),
	                ("y", ctypes.c_int)]
	point = point(10, 20)
	print point.x, point.y
	point = point(y=5)
	print point.x, point.y
	point(1,2,3)
	(error)
	class rect(ctypes.structure):
	    _fields_ = [("upperleft", point),
	                ("lowerright", point)]

	r = rect(point(1,2), point(3,4))
	r = rect((1,2), (3,4))
	rect.upperleft
	point.x

alignment/bytes:
	aligned as C
	use _pack_ to offset
		_pack_ = int > 0
	use ctypes.BigEndianStructure,
	           LittleEndianStructure,
	           BigEndianUnion,
	           LittleEndianUnion
bit fields (for ints only)
bit width as 3rd arg to int field


______________________________
-1.1.8- arrays
multiply datatype by int > 0

ex:
	class MyStruct(ctypes.Structure):
	    _fields_ = [("a", c_int),
	                ("b", c_float),
	                ("parray", POINT * 4)]

______________________________
-1.1.9- pointer
call pointer() on ctypes type
pointer.contents->original object
whenever retrieve obj constructs a new one
p = ctypes.pointer(thing)
thing is p = False
thing.contents is p = False

can assign to contents or use indexing

use POINTER() to explicitly create a pointer TYPE
ex:
	intpointer = ctypes.POINTER(ctypes.c_int)
	point_to_5 = intpointer(5)

______________________________
-1.1.10- conversion
pointers and arrays are compatible like c-type arrays
for passing pointers, can use object of same type,
	ctypes calls byref() automatically

can assign None to pointer to make it NULL
ctypes.cast(pointerobjthing, desiredtype)

______________________________
-1.1.11- forward declarations
ex:
	class Link(ctypes.Structure):
	    _fields_ = [("next", ctypes.POINTER(Link)),
	                ("data", ctypes.c_int)]


______________________________
-1.1.12- callables/function pointers
create class for callback
calling convention, return type, #/types of args
use CFUNCTYPE factory function for cdecl
use WINFUNCTYPE for stdcall

ex:
	CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
	def py_cmp_func(a, b):
	    return a[0] - b[0]

	qsort = ctypes.cdll.libc.qsort
	qsort.restype = None

	callback = CMPFUNC(py_cmp_func)

NOTE: if references to callbacks are not kept, they may be garbage collected = crash

______________________________
-1.1.13- library variables
ex:
	opt_flag = c_int.in_dll(library, "variable_name")


______________________________
-1.1.14- surprises
swapping members of objects: uses memory
ex:
	p1 = POINT(1,2)
	p2 = POINT(3,4)
	rect = RECT(p1, p2)
	rect.a, rect.b = rect.b, rect.a

b copied into a (mutated), then a copied back to b

ex2:
	s = ctypes.c_char_p()
	s.value = "abc def ghi"
	s.value
	s.value is s.value
(using .value returns a new object every time)

______________________________
-1.1.15- variable size data structures
use resize() kind of like malloc

ex:
	short_array = (c_short * 4)()
	print ctypes.sizeof(short_array)
	ctypes.resize(short_array, 4)
	#(>>>error occurs<<<)
	ctypes.resize(short_array, 32)
	short_array[:]
	short_array[3]
	short_array[4]
	#(>>>error occurs<<<)
	new_short_array = (ctypes.c_short*16).from_address(ctypes.addressof(short_array))

##############################
-1.2- reference
##############################
-1.2.1- finding shared libraries
import ctypes
import ctypes.util
ctypes.util.find_library(name)
	name has no prefix or suffix
might be better to hard-code library name instead of using find_library

instantiation:
	ctypes.CDLL(path)
	ctypes.WinDLL(path)
	ctypes.OleDLL(path)
	NOTE:
		above: releases GIL before call

	ctypes.PyDLL(path)
	NOTE:
		above: does not release GIL (only useful for calling Python C api functions directly)

LoadLibrary:
	ctypes.cdll.LoadLibrary(path)
	ctypes.oledll.LoadLibrary(path)
	ctypes.windll.LoadLibrary(path)
	ctypes.pythonapi
______________________________
-1.2.2- foreign functions
	by default: return int, accept any number of arguments
	ctypes._FuncPtr
		restype:    return type, None for void, ctypes.c_type or related (structure etc)
		argtypes:   list of argument types (ctypes, structs etc)
		errcheck:   callable for error checking on the return value
		            signature: callable(result, func, arguments)

______________________________
-1.2.3- prototypes
ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)
ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)
*above releases the GIL*

ctypes.PYFUNCTYPE(restype, *argtypes)
*above doesn't release GIL*

instantiation:
	prototype(address)
		(for the foreign types)
	prototype(callable)
		(for pytype)
	prototype(func_spec, [paramflags])
		func_spec: tuple: (name/ordinal, library)
	prototype(vtbl_index, name[,paramflags, iid]):
		foreign func call COM method
		vtbl_index: index into virtual function table
		name: COM method
		iid: pointer to interface identifier

	paramflags:
		list of same length as argtypes
		each entry : a tuple
			each tuple:
				index 0: 1|2|4: input|output|input defaults 0
				index 1: param name as string
				index 2: default value for parameter

ex:
	from ctypes import c_int, WINFUNCTYPE, windll
	from ctypes.wintypes import HWND, LPCSTR, UINT
	prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
	paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
	MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)
	MessageBox()
	MessageBox(text = "Spam, spam spam")
	MessageBox(flags = 2, text = "foo bar")

______________________________
-1.2.4- utility functions
	ctypes:
		addressof(obj)
		alignment(obj_or_type)
		byref(obj, [offset])
		cast(obj, type)
		create_string_buffer(init_or_size, [size])
		create_unicode_buffer(init_or_size, [size])
		DllCanUnloadNow()
			windows only, COM servers,
		DllGetClassObject()
			windows only, COM servers,
		FormatError([code])
			windows only
		GetLastError()
			windows only
		get_errno()
			ctypes-private copy
		get_last_error()
			windows only, gets ctypes-private copy
		memmove(dst, src, count)
			like strncpy
		memset(dst, c, count)
			sets vals to c
		POINTER(type)
			returns ctypes pointer class
		pointer(obj)
			creates a pointer
		resize(obj, size)
		set_conversion_mode(encoding, errors)
			sets rules ctypes objs use when converting 8-bit strings and unicode strings
				encoding: string specifying encoding like utf-8, mbcs, etc
				errors:		string specifying error handling ("strict", "replace", "ignore"
			empty args returns 2-tuple:
				(encoding, errors)
		set_errno(value)
		set_last_error(value)
			windows only
		sizeof(obj or type)
		string_at(address, [size])
		WinError(code=None, descr=None)
			windows only
		wstring_at(address, [size])
			wide character string at address length size
	ctypes.util
		find_library(name)
		find_msvcrt()
______________________________
-1.2.5- data types
	______________________________
	_CData
		base class of ctypes.c_*
		from_buffer(source, [offset])
			ctypes instance from the buffer
			must support writeable buffer interface
		from_buffer_copy(source, [offset])
			copy buffer from source (must be readable)
		from_address(address)
			use memory at address
		from_param(obj)
			adapts obj to ctypes type
			called when argtypes is set
		in_dll(library, name)
			gets library var
		_b_base_
			for shared memory-read-only member
		_b_needsfree_
			read-only, true when ctypes data instance has allocated memory block itself
		_objects
			None or dict of python objects that must be alive
			(only for looking, do not modify or death)
	______________________________
	_SimpleCData
		value
			value of instance
			access returns a new object
	______________________________
	Fundamental types:
		always converted to python types when specified as _restype_ or accessed from struct

		c_byte
		c_char
		c_char_p
		c_double
		c_longdouble
		c_float
		c_int
		c_int8
		c_int16
		c_int32
		c_int64
		c_long
		c_longlong
		c_short
		c_size_t
		c_ssize_t
		c_ubyte
		c_uint
		c_uint8
		c_uint16
		c_uint32
		c_uint64
		c_ulong
		c_ulonglong
		c_ushort
		c_void_p
		c_wchar
		c_wchar_p
		c_bool
		HRESULT
			Windows only
		py_object
			C PyObject* datatype
		ctypes.wintypes
			HWND
			WPARAM
			DWORD
			MSG
			RECT
	______________________________
	Structured Data Types
		Union(*args, **kw)
		BigEndianStructure(*args, **kw)
		LittleEndianStructure(*args, **kw)
		Structure(*args, **kw)
		NOTE:
			Structure and Union should be subclassed
			must define _fields_ variable
		_fields_:
			list of 2 or 3-tuples
				name, type, [bit-width (for ints only)
		_pack_:
			overrides allignment
		_anonymous_:
			names unnamed fields
			used for fields of non-fundamental types
			ex:
				class Identity(ctypes.Structure):
				    _fields_ = [('name', ctypes.c_char_p),
				                ('age',  ctypes.c_int)]
				class Human(ctypes.Structure):
				    _anonymous_ = ("u",)
				    _fields_ = [('id', Identity)]
				i = Identity('jason', 25)
				h = Human(i)
				h.name
				h.age
				h.id.name
				h.d.age
			all work, but h.id.age/name is going to be slower
				(needs to create an Identity object first)
		Note:
			subclasses' _fields_ are appended to superclass' _fields_
	______________________________
	arrays and pointers
		Array(*args)
			abstract base class for arrays
			create by ctypes.c_type * int
			_length_: length of array, returned by len()
			_type_	: type of each element
