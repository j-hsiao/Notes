contents:
-1- ssh
	-1.1- config
	-1.2- encryption/keys
	-1.3- forwarding
	-1.4- keys
-2- scp

______________________________
-1- ssh
	ssh user@domain
	ssh -l user domain

	ssh configuration/setting files are generally in ~/.ssh
	~/.ssh should have permissions 700
	public keys: 644
	private keys: 600
	authorized_keys: 600

	______________________________
	-1.1- config
		config file paths
			/etc/ssh/ssh_config
			~/.ssh/config
		syntax:
			sequence of key value[s] pairs separated by whitespace
			# comment
			" a single argument with spaces"
			Indentation is ignored.
			Key value pairs apply to the most recent HOST patterns line.
			For each option, the first match applies.
			keys are case INSENSTIVE

			keys:
				Host: patterns separated by whitespace (ORed together)
				HostName: the actual host name to use (ip,
					www.somewhere.com, etc)
				IdentitiesOnly: [yes|no] only use the IdentityFile even if
					ssh agent gives other identities
				IdentityFile: specify the private key file
					The file name may use the tilde syntax to refer to a
					user's home directory or one of the following escape
					characters:
						'%d' local user's home directory
						'%u' local user name
						'%l' local host name
						'%h' remote host name
						'%r' remote user name
					Multiple files are allowed (tried in order)
					LocalForward: port forwarding from local machine to remote machine.
						2 arguments: [<bindaddr>:]port <hostname at remote>:port
						put ipv6 addresses in [] or use <ipv6addr>/port
						<bindaddr>: which interface to bind to. localhost = only local can use
							empty or * = all interfaces
					PasswordAuthentication [yes|no]
					Port: port to connect to at remote
					RemoteForward: forward remote port to local same format as
						LocalForward, except order is <remote addr> <local addr>
						empty means loopback only
					ServerAliveInterval: secs, send a keepalive message to
						server asking for a response.
					TCPKeepAlive: [yes|no] send TCP keepalive messages, will dc if
						network is down temporarily
					User: specify the user to ssh as

			patterns:
				*: 0 or more chars
				?: 1 character
				!: negate the match
				can have commma delimited for a "pattern-list"
				(an AND)

			For each option, the earliest match is used.
			eg.
				HOST name
				    USER myuser
				HOST *e
				    USER bad
				    SERVERALIVEINTERVAL 69
				HOST *
				    IDENTITIESONLY yes

				host:       options:
				name        USER myuser
				            SERVERALIVEINTERVAL 69
				            IDENTITIESONLY yes
				tame        USER bad
				            SERVERALIVEINTERVAL 69
				            IDENTITIESONLY yes

				For name, the USER under HOST name matches first so that
				value is used.

	_______________________________
	-1.2- encryption/keys
		ssh-keygen -t type -b bits -f file -C comment -n ""
		ed25519 is more secure on the private key
		rsa:
			generates an rsa and rsa.pub file
			put the rsa.pub file in the target host
			~/.ssh/authorized_keys
			when sshing use the rsa file to the -i argument

		The public key should be appended to remote server's authorized_keys.
	______________________________
	-1.3- forwarding
		ssh can perform port forwarding via ssh tunneling
		adds ssh security to the connection... (at least for
		the segment between the 2 machines)

		Forward from client to ssh host
			ssh -L [<localhost>]:<localport>:<remotehost>:<remoteport>
				bind a socket to <localhost>:<localport> which forwards data
				to <remotehost>:<remoteport>

		Forward from ssh host to client
			ssh -R [remotehost]:<remoteport>:<localhost>:<localport>
				ssh to the remote machine, and create a socket bound to
					<remotehost>:<remoteport> which forward traffic to
					<localhost>:<localport>
	_______________________________
	-1.4- keys
		create a key:
			ssh-keygen -t [rsa|ed25519] -C "comment"

		this creates a private and .pub file
		put .pub on the remote[s] that you want to ssh to.
		private should be kept on your personally-used machines

		change password:
			ssh-keygen -p -f path2existingfile

_______________________________
-2- scp
	scp source files ... destination
		format:
			filepath (localhost)
			[user@]host:hostpath_can_use_~
		other notes:
			-P instead of -p for port
